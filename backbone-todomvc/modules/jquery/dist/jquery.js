/*!
 * jQuery JavaScript Library v2.1.4
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2015-04-28T16:01Z
 */(function(global,factory){if(stringTraceTripleEqual(typeof module === "undefined"?"undefined":stringTraceTypeOf(module),stringTrace("object")) && stringTraceTripleEqual(typeof module.exports === "undefined"?"undefined":stringTraceTypeOf(module.exports),stringTrace("object"))){ // For CommonJS and CommonJS-like environments where a proper `window`
// is present, execute the factory and get jQuery.
// For environments that do not have a `window` with a `document`
// (such as Node.js), expose a factory as module.exports.
// This accentuates the need for the creation of a real `window`.
// e.g. var jQuery = require("jquery")(window);
// See ticket #14549 for more info.
module.exports = stringTraceUseValue(global.document)?factory(global,true):function(w){if(!w.document){throw new Error(stringTrace("jQuery requires a window with a document"));}return factory(w);};}else {factory(global);} // Pass this if window is not defined yet
})(stringTraceUseValue(stringTraceNotTripleEqual(typeof window === "undefined"?"undefined":stringTraceTypeOf(window),stringTrace("undefined")))?window:this,function(window,noGlobal){ // Support: Firefox 18+
// Can't be in strict mode, several libs including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
//
var arr=[];var slice=arr.slice;var concat=arr.concat;var push=arr.push;var indexOf=arr.indexOf;var class2type={};var toString=class2type.toString;var hasOwn=class2type.hasOwnProperty;var support={};var  // Use the correct document accordingly with window argument (sandbox)
document=window.document,version=stringTrace("2.1.4"), // Define a local copy of jQuery
jQuery=function(selector,context){ // The jQuery object is actually just the init constructor 'enhanced'
// Need init if jQuery is called (just allow error to be thrown if not included)
return new jQuery.fn.init(selector,context);}, // Support: Android<4.1
// Make sure we trim BOM and NBSP
rtrim=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, // Matches dashed string for camelizing
rmsPrefix=/^-ms-/,rdashAlpha=/-([\da-z])/gi, // Used by jQuery.camelCase as callback to replace()
fcamelCase=function(all,letter){return letter.toUpperCase();};jQuery.fn = jQuery.prototype = { // The current version of jQuery being used
jquery:version,constructor:jQuery, // Start with an empty selector
selector:stringTrace(""), // The default length of a jQuery object is 0
length:0,toArray:function(){return slice.call(this);}, // Get the Nth element in the matched element set OR
// Get the whole matched element set as a clean array
get:function(num){return stringTraceUseValue(num != null)? // Return just the one element from the set
stringTraceUseValue(num < 0)?this[stringTraceAdd(num,this.length)]:this[num]: // Return all the elements in a clean array
slice.call(this);}, // Take an array of elements and push it onto the stack
// (returning the new matched element set)
pushStack:function(elems){ // Build a new jQuery matched element set
var ret=jQuery.merge(this.constructor(),elems); // Add the old object onto the stack (as a reference)
ret.prevObject = this;ret.context = this.context; // Return the newly-formed element set
return ret;}, // Execute a callback for every element in the matched set.
// (You can seed the arguments with an array of args, but this is
// only used internally.)
each:function(callback,args){return jQuery.each(this,callback,args);},map:function(callback){return this.pushStack(jQuery.map(this,function(elem,i){return callback.call(elem,i,elem);}));},slice:function(){return this.pushStack(slice.apply(this,arguments));},first:function(){return this.eq(0);},last:function(){return this.eq(-1);},eq:function(i){var len=this.length,j=stringTraceAdd(+i,stringTraceUseValue(i < 0)?len:0);return this.pushStack(stringTraceUseValue(j >= 0 && j < len)?[this[j]]:[]);},end:function(){return this.prevObject || this.constructor(null);}, // For internal use only.
// Behaves like an Array's method, not like a jQuery method.
push:push,sort:arr.sort,splice:arr.splice};jQuery.extend = jQuery.fn.extend = function(){var options,name,src,copy,copyIsArray,clone,target=arguments[0] || {},i=1,length=arguments.length,deep=false; // Handle a deep copy situation
if(stringTraceTripleEqual(typeof target === "undefined"?"undefined":stringTraceTypeOf(target),stringTrace("boolean"))){deep = target; // Skip the boolean and the target
target = arguments[i] || {};i++;} // Handle case when target is a string or something (possible in deep copy)
if(stringTraceNotTripleEqual(typeof target === "undefined"?"undefined":stringTraceTypeOf(target),stringTrace("object")) && !jQuery.isFunction(target)){target = {};} // Extend jQuery itself if only one argument is passed
if(stringTraceTripleEqual(i,length)){target = this;i--;}for(;i < length;i++) { // Only deal with non-null/undefined values
if((options = arguments[i]) != null){ // Extend the base object
for(name in options) {src = target[name];copy = options[name]; // Prevent never-ending loop
if(stringTraceTripleEqual(target,copy)){continue;} // Recurse if we're merging plain objects or arrays
if(deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))){if(copyIsArray){copyIsArray = false;clone = stringTraceUseValue(src && jQuery.isArray(src))?src:[];}else {clone = stringTraceUseValue(src && jQuery.isPlainObject(src))?src:{};} // Never move original objects, clone them
target[name] = jQuery.extend(deep,clone,copy); // Don't bring in undefined values
}else if(stringTraceNotTripleEqual(copy,undefined)){target[name] = copy;}}}} // Return the modified object
return target;};jQuery.extend({ // Unique for each copy of jQuery on the page
expando:stringTraceAdd(stringTrace("jQuery"),stringTraceAdd(version,Math.random()).replace(/\D/g,stringTrace(""))), // Assume jQuery is ready without the ready module
isReady:true,error:function(msg){throw new Error(msg);},noop:function(){},isFunction:function(obj){return stringTraceTripleEqual(jQuery.type(obj),stringTrace("function"));},isArray:Array.isArray,isWindow:function(obj){return obj != null && stringTraceTripleEqual(obj,obj.window);},isNumeric:function(obj){ // parseFloat NaNs numeric-cast false positives (null|true|false|"")
// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
// subtraction forces infinities to NaN
// adding 1 corrects loss of precision from parseFloat (#15100)
return !jQuery.isArray(obj) && stringTraceAdd(obj - parseFloat(obj),1) >= 0;},isPlainObject:function(obj){ // Not plain objects:
// - Any object or value whose internal [[Class]] property is not "[object Object]"
// - DOM nodes
// - window
if(stringTraceNotTripleEqual(jQuery.type(obj),stringTrace("object")) || obj.nodeType || jQuery.isWindow(obj)){return false;}if(obj.constructor && !hasOwn.call(obj.constructor.prototype,stringTrace("isPrototypeOf"))){return false;} // If the function hasn't returned already, we're confident that
// |obj| is a plain object, created by {} or constructed with new Object
return true;},isEmptyObject:function(obj){var name;for(name in obj) {return false;}return true;},type:function(obj){if(obj == null){return stringTraceAdd(obj,stringTrace(""));} // Support: Android<4.0, iOS<6 (functionish RegExp)
return stringTraceUseValue(stringTraceTripleEqual(typeof obj === "undefined"?"undefined":stringTraceTypeOf(obj),stringTrace("object")) || stringTraceTripleEqual(typeof obj === "undefined"?"undefined":stringTraceTypeOf(obj),stringTrace("function")))?class2type[toString.call(obj)] || stringTrace("object"):typeof obj === "undefined"?"undefined":stringTraceTypeOf(obj);}, // Evaluates a script in a global context
globalEval:function(code){var script,indirect=eval;code = jQuery.trim(code);if(code){ // If the code includes a valid, prologue position
// strict mode pragma, execute code by injecting a
// script tag into the document.
if(stringTraceTripleEqual(code.indexOf(stringTrace("use strict")),1)){script = document.createElement(stringTrace("script"));script.text = code;document.head.appendChild(script).parentNode.removeChild(script);}else { // Otherwise, avoid the DOM node creation, insertion
// and removal by using an indirect global eval
indirect(code);}}}, // Convert dashed to camelCase; used by the css and data modules
// Support: IE9-11+
// Microsoft forgot to hump their vendor prefix (#9572)
camelCase:function(string){return string.replace(rmsPrefix,stringTrace("ms-")).replace(rdashAlpha,fcamelCase);},nodeName:function(elem,name){return elem.nodeName && stringTraceTripleEqual(elem.nodeName.toLowerCase(),name.toLowerCase());}, // args is for internal usage only
each:function(obj,callback,args){var value,i=0,length=obj.length,isArray=isArraylike(obj);if(args){if(isArray){for(;i < length;i++) {value = callback.apply(obj[i],args);if(stringTraceTripleEqual(value,false)){break;}}}else {for(i in obj) {value = callback.apply(obj[i],args);if(stringTraceTripleEqual(value,false)){break;}}} // A special, fast, case for the most common use of each
}else {if(isArray){for(;i < length;i++) {value = callback.call(obj[i],i,obj[i]);if(stringTraceTripleEqual(value,false)){break;}}}else {for(i in obj) {value = callback.call(obj[i],i,obj[i]);if(stringTraceTripleEqual(value,false)){break;}}}}return obj;}, // Support: Android<4.1
trim:function(text){return stringTraceUseValue(text == null)?stringTrace(""):stringTraceAdd(text,stringTrace("")).replace(rtrim,stringTrace(""));}, // results is for internal usage only
makeArray:function(arr,results){var ret=results || [];if(arr != null){if(isArraylike(Object(arr))){jQuery.merge(ret,stringTraceUseValue(stringTraceTripleEqual(typeof arr === "undefined"?"undefined":stringTraceTypeOf(arr),stringTrace("string")))?[arr]:arr);}else {push.call(ret,arr);}}return ret;},inArray:function(elem,arr,i){return stringTraceUseValue(arr == null)?-1:indexOf.call(arr,elem,i);},merge:function(first,second){var len=+second.length,j=0,i=first.length;for(;j < len;j++) {first[i++] = second[j];}first.length = i;return first;},grep:function(elems,callback,invert){var callbackInverse,matches=[],i=0,length=elems.length,callbackExpect=!invert; // Go through the array, only saving the items
// that pass the validator function
for(;i < length;i++) {callbackInverse = !callback(elems[i],i);if(stringTraceNotTripleEqual(callbackInverse,callbackExpect)){matches.push(elems[i]);}}return matches;}, // arg is for internal usage only
map:function(elems,callback,arg){var value,i=0,length=elems.length,isArray=isArraylike(elems),ret=[]; // Go through the array, translating each of the items to their new values
if(isArray){for(;i < length;i++) {value = callback(elems[i],i,arg);if(value != null){ret.push(value);}} // Go through every key on the object,
}else {for(i in elems) {value = callback(elems[i],i,arg);if(value != null){ret.push(value);}}} // Flatten any nested arrays
return concat.apply([],ret);}, // A global GUID counter for objects
guid:1, // Bind a function to a context, optionally partially applying any
// arguments.
proxy:function(fn,context){var tmp,args,proxy;if(stringTraceTripleEqual(typeof context === "undefined"?"undefined":stringTraceTypeOf(context),stringTrace("string"))){tmp = fn[context];context = fn;fn = tmp;} // Quick check to determine if target is callable, in the spec
// this throws a TypeError, but we will just return undefined.
if(!jQuery.isFunction(fn)){return undefined;} // Simulated bind
args = slice.call(arguments,2);proxy = function(){return fn.apply(context || this,args.concat(slice.call(arguments)));}; // Set the guid of unique handler to the same of original handler, so it can be removed
proxy.guid = fn.guid = fn.guid || jQuery.guid++;return proxy;},now:Date.now, // jQuery.support is not used in Core but other projects attach their
// properties to it so it needs to exist.
support:support}); // Populate the class2type map
jQuery.each(stringTrace("Boolean Number String Function Array Date RegExp Object Error").split(stringTrace(" ")),function(i,name){class2type[stringTraceAdd(stringTraceAdd(stringTrace("[object "),name),stringTrace("]"))] = name.toLowerCase();});function isArraylike(obj){ // Support: iOS 8.2 (not reproducible in simulator)
// `in` check used to prevent JIT error (gh-2145)
// hasOwn isn't used here due to false negatives
// regarding Nodelist length in IE
var length=stringTrace("length") in obj && obj.length,type=jQuery.type(obj);if(stringTraceTripleEqual(type,stringTrace("function")) || jQuery.isWindow(obj)){return false;}if(stringTraceTripleEqual(obj.nodeType,1) && length){return true;}return stringTraceTripleEqual(type,stringTrace("array")) || stringTraceTripleEqual(length,0) || stringTraceTripleEqual(typeof length === "undefined"?"undefined":stringTraceTypeOf(length),stringTrace("number")) && length > 0 && length - 1 in obj;}var Sizzle= /*!
 * Sizzle CSS Selector Engine v2.2.0-pre
 * http://sizzlejs.com/
 *
 * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-12-16
 */(function(window){var i,support,Expr,getText,isXML,tokenize,compile,select,outermostContext,sortInput,hasDuplicate, // Local document vars
setDocument,document,docElem,documentIsHTML,rbuggyQSA,rbuggyMatches,matches,contains, // Instance-specific data
expando=stringTraceAdd(stringTrace("sizzle"),1 * new Date()),preferredDoc=window.document,dirruns=0,done=0,classCache=createCache(),tokenCache=createCache(),compilerCache=createCache(),sortOrder=function(a,b){if(stringTraceTripleEqual(a,b)){hasDuplicate = true;}return 0;}, // General-purpose constants
MAX_NEGATIVE=1 << 31, // Instance methods
hasOwn=({}).hasOwnProperty,arr=[],pop=arr.pop,push_native=arr.push,push=arr.push,slice=arr.slice, // Use a stripped-down indexOf as it's faster than native
// http://jsperf.com/thor-indexof-vs-for/5
indexOf=function(list,elem){var i=0,len=list.length;for(;i < len;i++) {if(stringTraceTripleEqual(list[i],elem)){return i;}}return -1;},booleans=stringTrace("checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped"), // Regular expressions
// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
whitespace=stringTrace("[\\x20\\t\\r\\n\\f]"), // http://www.w3.org/TR/css3-syntax/#characters
characterEncoding=stringTrace("(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+"), // Loosely modeled on CSS identifier characters
// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
identifier=characterEncoding.replace(stringTrace("w"),stringTrace("w#")), // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
attributes=stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTrace("\\["),whitespace),stringTrace("*(")),characterEncoding),stringTrace(")(?:")),whitespace), // Operator (capture 2)
stringTrace("*([*^$|!~]?=)")),whitespace), // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
stringTrace("*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(")),identifier),stringTrace("))|)")),whitespace),stringTrace("*\\]")),pseudos=stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTrace(":("),characterEncoding),stringTrace(")(?:\\((")), // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
// 1. quoted (capture 3; capture 4 or capture 5)
stringTrace("('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|")), // 2. simple (capture 6)
stringTrace("((?:\\\\.|[^\\\\()[\\]]|")),attributes),stringTrace(")*)|")), // 3. anything else (capture 2)
stringTrace(".*")),stringTrace(")\\)|)")), // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
rwhitespace=new RegExp(stringTraceAdd(whitespace,stringTrace("+")),stringTrace("g")),rtrim=new RegExp(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTrace("^"),whitespace),stringTrace("+|((?:^|[^\\\\])(?:\\\\.)*)")),whitespace),stringTrace("+$")),stringTrace("g")),rcomma=new RegExp(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTrace("^"),whitespace),stringTrace("*,")),whitespace),stringTrace("*"))),rcombinators=new RegExp(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTrace("^"),whitespace),stringTrace("*([>+~]|")),whitespace),stringTrace(")")),whitespace),stringTrace("*"))),rattributeQuotes=new RegExp(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTrace("="),whitespace),stringTrace("*([^\\]'\"]*?)")),whitespace),stringTrace("*\\]")),stringTrace("g")),rpseudo=new RegExp(pseudos),ridentifier=new RegExp(stringTraceAdd(stringTraceAdd(stringTrace("^"),identifier),stringTrace("$"))),matchExpr={"ID":new RegExp(stringTraceAdd(stringTraceAdd(stringTrace("^#("),characterEncoding),stringTrace(")"))),"CLASS":new RegExp(stringTraceAdd(stringTraceAdd(stringTrace("^\\.("),characterEncoding),stringTrace(")"))),"TAG":new RegExp(stringTraceAdd(stringTraceAdd(stringTrace("^("),characterEncoding.replace(stringTrace("w"),stringTrace("w*"))),stringTrace(")"))),"ATTR":new RegExp(stringTraceAdd(stringTrace("^"),attributes)),"PSEUDO":new RegExp(stringTraceAdd(stringTrace("^"),pseudos)),"CHILD":new RegExp(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTrace("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("),whitespace),stringTrace("*(even|odd|(([+-]|)(\\d*)n|)")),whitespace),stringTrace("*(?:([+-]|)")),whitespace),stringTrace("*(\\d+)|))")),whitespace),stringTrace("*\\)|)")),stringTrace("i")),"bool":new RegExp(stringTraceAdd(stringTraceAdd(stringTrace("^(?:"),booleans),stringTrace(")$")),stringTrace("i")), // For use in libraries implementing .is()
// We use this for POS matching in `select`
"needsContext":new RegExp(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTrace("^"),whitespace),stringTrace("*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(")),whitespace),stringTrace("*((?:-\\d)?\\d*)")),whitespace),stringTrace("*\\)|)(?=[^-]|$)")),stringTrace("i"))},rinputs=/^(?:input|select|textarea|button)$/i,rheader=/^h\d$/i,rnative=/^[^{]+\{\s*\[native \w/, // Easily-parseable/retrievable ID or TAG or CLASS selectors
rquickExpr=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,rsibling=/[+~]/,rescape=/'|\\/g, // CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
runescape=new RegExp(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTrace("\\\\([\\da-f]{1,6}"),whitespace),stringTrace("?|(")),whitespace),stringTrace(")|.)")),stringTrace("ig")),funescape=function(_,escaped,escapedWhitespace){var high=stringTraceAdd(stringTrace("0x"),escaped) - 0x10000; // NaN means non-codepoint
// Support: Firefox<24
// Workaround erroneous numeric interpretation of +"0x"
return stringTraceUseValue(stringTraceNotTripleEqual(high,high) || escapedWhitespace)?escaped:stringTraceUseValue(high < 0)? // BMP codepoint
String.fromCharCode(stringTraceAdd(high,0x10000)): // Supplemental Plane codepoint (surrogate pair)
String.fromCharCode(high >> 10 | 0xD800,high & 0x3FF | 0xDC00);}, // Used for iframes
// See setDocument()
// Removing the function wrapper causes a "Permission Denied"
// error in IE
unloadHandler=function(){setDocument();}; // Optimize for push.apply( _, NodeList )
try{push.apply(arr = slice.call(preferredDoc.childNodes),preferredDoc.childNodes); // Support: Android<4.0
// Detect silently failing push.apply
arr[preferredDoc.childNodes.length].nodeType;}catch(e) {push = {apply:stringTraceUseValue(arr.length)? // Leverage slice if possible
function(target,els){push_native.apply(target,slice.call(els));}: // Support: IE<9
// Otherwise append directly
function(target,els){var j=target.length,i=0; // Can't trust NodeList.length
while(stringTraceUseValue(target[j++] = els[i++])) {}target.length = j - 1;}};}function Sizzle(selector,context,results,seed){var match,elem,m,nodeType, // QSA vars
i,groups,old,nid,newContext,newSelector;if(stringTraceNotTripleEqual(stringTraceUseValue(context)?context.ownerDocument || context:preferredDoc,document)){setDocument(context);}context = context || document;results = results || [];nodeType = context.nodeType;if(stringTraceNotTripleEqual(typeof selector === "undefined"?"undefined":stringTraceTypeOf(selector),stringTrace("string")) || !selector || stringTraceNotTripleEqual(nodeType,1) && stringTraceNotTripleEqual(nodeType,9) && stringTraceNotTripleEqual(nodeType,11)){return results;}if(!seed && documentIsHTML){ // Try to shortcut find operations when possible (e.g., not under DocumentFragment)
if(stringTraceNotTripleEqual(nodeType,11) && (match = rquickExpr.exec(selector))){ // Speed-up: Sizzle("#ID")
if(m = match[1]){if(stringTraceTripleEqual(nodeType,9)){elem = context.getElementById(m); // Check parentNode to catch when Blackberry 4.6 returns
// nodes that are no longer in the document (jQuery #6963)
if(elem && elem.parentNode){ // Handle the case where IE, Opera, and Webkit return items
// by name instead of ID
if(stringTraceTripleEqual(elem.id,m)){results.push(elem);return results;}}else {return results;}}else { // Context is not a document
if(context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context,elem) && stringTraceTripleEqual(elem.id,m)){results.push(elem);return results;}} // Speed-up: Sizzle("TAG")
}else if(match[2]){push.apply(results,context.getElementsByTagName(selector));return results; // Speed-up: Sizzle(".CLASS")
}else if((m = match[3]) && support.getElementsByClassName){push.apply(results,context.getElementsByClassName(m));return results;}} // QSA path
if(support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))){nid = old = expando;newContext = context;newSelector = stringTraceNotTripleEqual(nodeType,1) && selector; // qSA works strangely on Element-rooted queries
// We can work around this by specifying an extra ID on the root
// and working up from there (Thanks to Andrew Dupont for the technique)
// IE 8 doesn't work on object elements
if(stringTraceTripleEqual(nodeType,1) && stringTraceNotTripleEqual(context.nodeName.toLowerCase(),stringTrace("object"))){groups = tokenize(selector);if(old = context.getAttribute(stringTrace("id"))){nid = old.replace(rescape,stringTrace("\\$&"));}else {context.setAttribute(stringTrace("id"),nid);}nid = stringTraceAdd(stringTraceAdd(stringTrace("[id='"),nid),stringTrace("'] "));i = groups.length;while(stringTraceUseValue(i--)) {groups[i] = stringTraceAdd(nid,toSelector(groups[i]));}newContext = rsibling.test(selector) && testContext(context.parentNode) || context;newSelector = groups.join(stringTrace(","));}if(newSelector){try{push.apply(results,newContext.querySelectorAll(newSelector));return results;}catch(qsaError) {}finally {if(!old){context.removeAttribute(stringTrace("id"));}}}}} // All others
return select(selector.replace(rtrim,stringTrace("$1")),context,results,seed);} /**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */function createCache(){var keys=[];function cache(key,value){ // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
if(keys.push(stringTraceAdd(key,stringTrace(" "))) > Expr.cacheLength){ // Only keep the most recent entries
delete cache[keys.shift()];}return cache[stringTraceAdd(key,stringTrace(" "))] = value;}return cache;} /**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */function markFunction(fn){fn[expando] = true;return fn;} /**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */function assert(fn){var div=document.createElement(stringTrace("div"));try{return !!fn(div);}catch(e) {return false;}finally { // Remove from its parent by default
if(div.parentNode){div.parentNode.removeChild(div);} // release memory in IE
div = null;}} /**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */function addHandle(attrs,handler){var arr=attrs.split(stringTrace("|")),i=attrs.length;while(stringTraceUseValue(i--)) {Expr.attrHandle[arr[i]] = handler;}} /**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */function siblingCheck(a,b){var cur=b && a,diff=cur && stringTraceTripleEqual(a.nodeType,1) && stringTraceTripleEqual(b.nodeType,1) && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE); // Use IE sourceIndex if available on both nodes
if(diff){return diff;} // Check if b follows a
if(cur){while(stringTraceUseValue(cur = cur.nextSibling)) {if(stringTraceTripleEqual(cur,b)){return -1;}}}return stringTraceUseValue(a)?1:-1;} /**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */function createInputPseudo(type){return function(elem){var name=elem.nodeName.toLowerCase();return stringTraceTripleEqual(name,stringTrace("input")) && stringTraceTripleEqual(elem.type,type);};} /**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */function createButtonPseudo(type){return function(elem){var name=elem.nodeName.toLowerCase();return (stringTraceTripleEqual(name,stringTrace("input")) || stringTraceTripleEqual(name,stringTrace("button"))) && stringTraceTripleEqual(elem.type,type);};} /**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */function createPositionalPseudo(fn){return markFunction(function(argument){argument = +argument;return markFunction(function(seed,matches){var j,matchIndexes=fn([],seed.length,argument),i=matchIndexes.length; // Match elements found at the specified indexes
while(stringTraceUseValue(i--)) {if(seed[j = matchIndexes[i]]){seed[j] = !(matches[j] = seed[j]);}}});});} /**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */function testContext(context){return context && stringTraceNotTripleEqual(typeof context.getElementsByTagName === "undefined"?"undefined":stringTraceTypeOf(context.getElementsByTagName),stringTrace("undefined")) && context;} // Expose support vars for convenience
support = Sizzle.support = {}; /**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */isXML = Sizzle.isXML = function(elem){ // documentElement is verified for cases where it doesn't yet exist
// (such as loading iframes in IE - #4833)
var documentElement=elem && (elem.ownerDocument || elem).documentElement;return stringTraceUseValue(documentElement)?stringTraceNotTripleEqual(documentElement.nodeName,stringTrace("HTML")):false;}; /**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */setDocument = Sizzle.setDocument = function(node){var hasCompare,parent,doc=stringTraceUseValue(node)?node.ownerDocument || node:preferredDoc; // If no document and documentElement is available, return
if(stringTraceTripleEqual(doc,document) || stringTraceNotTripleEqual(doc.nodeType,9) || !doc.documentElement){return document;} // Set our document
document = doc;docElem = doc.documentElement;parent = doc.defaultView; // Support: IE>8
// If iframe document is assigned to "document" variable and if iframe has been reloaded,
// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
// IE6-8 do not support the defaultView property so parent will be undefined
if(parent && stringTraceNotTripleEqual(parent,parent.top)){ // IE11 does not have attachEvent, so all must suffer
if(parent.addEventListener){parent.addEventListener(stringTrace("unload"),unloadHandler,false);}else if(parent.attachEvent){parent.attachEvent(stringTrace("onunload"),unloadHandler);}} /* Support tests
	---------------------------------------------------------------------- */documentIsHTML = !isXML(doc); /* Attributes
	---------------------------------------------------------------------- */ // Support: IE<8
// Verify that getAttribute really returns attributes and not properties
// (excepting IE8 booleans)
support.attributes = assert(function(div){div.className = stringTrace("i");return !div.getAttribute(stringTrace("className"));}); /* getElement(s)By*
	---------------------------------------------------------------------- */ // Check if getElementsByTagName("*") returns only elements
support.getElementsByTagName = assert(function(div){div.appendChild(doc.createComment(stringTrace("")));return !div.getElementsByTagName(stringTrace("*")).length;}); // Support: IE<9
support.getElementsByClassName = rnative.test(doc.getElementsByClassName); // Support: IE<10
// Check if getElementById returns elements by name
// The broken getElementById methods don't pick up programatically-set names,
// so use a roundabout getElementsByName test
support.getById = assert(function(div){docElem.appendChild(div).id = expando;return !doc.getElementsByName || !doc.getElementsByName(expando).length;}); // ID find and filter
if(support.getById){Expr.find[stringTrace("ID")] = function(id,context){if(stringTraceNotTripleEqual(typeof context.getElementById === "undefined"?"undefined":stringTraceTypeOf(context.getElementById),stringTrace("undefined")) && documentIsHTML){var m=context.getElementById(id); // Check parentNode to catch when Blackberry 4.6 returns
// nodes that are no longer in the document #6963
return stringTraceUseValue(m && m.parentNode)?[m]:[];}};Expr.filter[stringTrace("ID")] = function(id){var attrId=id.replace(runescape,funescape);return function(elem){return stringTraceTripleEqual(elem.getAttribute(stringTrace("id")),attrId);};};}else { // Support: IE6/7
// getElementById is not reliable as a find shortcut
delete Expr.find[stringTrace("ID")];Expr.filter[stringTrace("ID")] = function(id){var attrId=id.replace(runescape,funescape);return function(elem){var node=stringTraceNotTripleEqual(typeof elem.getAttributeNode === "undefined"?"undefined":stringTraceTypeOf(elem.getAttributeNode),stringTrace("undefined")) && elem.getAttributeNode(stringTrace("id"));return node && stringTraceTripleEqual(node.value,attrId);};};} // Tag
Expr.find[stringTrace("TAG")] = stringTraceUseValue(support.getElementsByTagName)?function(tag,context){if(stringTraceNotTripleEqual(typeof context.getElementsByTagName === "undefined"?"undefined":stringTraceTypeOf(context.getElementsByTagName),stringTrace("undefined"))){return context.getElementsByTagName(tag); // DocumentFragment nodes don't have gEBTN
}else if(support.qsa){return context.querySelectorAll(tag);}}:function(tag,context){var elem,tmp=[],i=0, // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
results=context.getElementsByTagName(tag); // Filter out possible comments
if(stringTraceTripleEqual(tag,stringTrace("*"))){while(stringTraceUseValue(elem = results[i++])) {if(stringTraceTripleEqual(elem.nodeType,1)){tmp.push(elem);}}return tmp;}return results;}; // Class
Expr.find[stringTrace("CLASS")] = support.getElementsByClassName && function(className,context){if(documentIsHTML){return context.getElementsByClassName(className);}}; /* QSA/matchesSelector
	---------------------------------------------------------------------- */ // QSA and matchesSelector support
// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
rbuggyMatches = []; // qSa(:focus) reports false when true (Chrome 21)
// We allow this because of a bug in IE8/9 that throws an error
// whenever `document.activeElement` is accessed on an iframe
// So, we allow :focus to pass through QSA all the time to avoid the IE error
// See http://bugs.jquery.com/ticket/13378
rbuggyQSA = [];if(support.qsa = rnative.test(doc.querySelectorAll)){ // Build QSA regex
// Regex strategy adopted from Diego Perini
assert(function(div){ // Select is set to empty string on purpose
// This is to test IE's treatment of not explicitly
// setting a boolean content attribute,
// since its presence should be enough
// http://bugs.jquery.com/ticket/12359
stringTraceSetInnerHTML(docElem.appendChild(div),stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTrace("<a id='"),expando),stringTrace("'></a>")),stringTrace("<select id='")),expando),stringTrace("-\f]' msallowcapture=''>")),stringTrace("<option selected=''></option></select>"))); // Support: IE8, Opera 11-12.16
// Nothing should be selected when empty strings follow ^= or $= or *=
// The test attribute must be unknown in Opera but "safe" for WinRT
// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
if(div.querySelectorAll(stringTrace("[msallowcapture^='']")).length){rbuggyQSA.push(stringTraceAdd(stringTraceAdd(stringTrace("[*^$]="),whitespace),stringTrace("*(?:''|\"\")")));} // Support: IE8
// Boolean attributes and "value" are not treated correctly
if(!div.querySelectorAll(stringTrace("[selected]")).length){rbuggyQSA.push(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTrace("\\["),whitespace),stringTrace("*(?:value|")),booleans),stringTrace(")")));} // Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+
if(!div.querySelectorAll(stringTraceAdd(stringTraceAdd(stringTrace("[id~="),expando),stringTrace("-]"))).length){rbuggyQSA.push(stringTrace("~="));} // Webkit/Opera - :checked should return selected option elements
// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
// IE8 throws error here and will not see later tests
if(!div.querySelectorAll(stringTrace(":checked")).length){rbuggyQSA.push(stringTrace(":checked"));} // Support: Safari 8+, iOS 8+
// https://bugs.webkit.org/show_bug.cgi?id=136851
// In-page `selector#id sibing-combinator selector` fails
if(!div.querySelectorAll(stringTraceAdd(stringTraceAdd(stringTrace("a#"),expando),stringTrace("+*"))).length){rbuggyQSA.push(stringTrace(".#.+[+~]"));}});assert(function(div){ // Support: Windows 8 Native Apps
// The type and name attributes are restricted during .innerHTML assignment
var input=doc.createElement(stringTrace("input"));input.setAttribute(stringTrace("type"),stringTrace("hidden"));div.appendChild(input).setAttribute(stringTrace("name"),stringTrace("D")); // Support: IE8
// Enforce case-sensitivity of name attribute
if(div.querySelectorAll(stringTrace("[name=d]")).length){rbuggyQSA.push(stringTraceAdd(stringTraceAdd(stringTrace("name"),whitespace),stringTrace("*[*^$|!~]?=")));} // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
// IE8 throws error here and will not see later tests
if(!div.querySelectorAll(stringTrace(":enabled")).length){rbuggyQSA.push(stringTrace(":enabled"),stringTrace(":disabled"));} // Opera 10-11 does not throw on post-comma invalid pseudos
div.querySelectorAll(stringTrace("*,:x"));rbuggyQSA.push(stringTrace(",.*:"));});}if(support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)){assert(function(div){ // Check to see if it's possible to do matchesSelector
// on a disconnected node (IE 9)
support.disconnectedMatch = matches.call(div,stringTrace("div")); // This should fail with an exception
// Gecko does not error, returns false instead
matches.call(div,stringTrace("[s!='']:x"));rbuggyMatches.push(stringTrace("!="),pseudos);});}rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join(stringTrace("|")));rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join(stringTrace("|"))); /* Contains
	---------------------------------------------------------------------- */hasCompare = rnative.test(docElem.compareDocumentPosition); // Element contains another
// Purposefully does not implement inclusive descendent
// As in, an element does not contain itself
contains = stringTraceUseValue(hasCompare || rnative.test(docElem.contains))?function(a,b){var adown=stringTraceUseValue(stringTraceTripleEqual(a.nodeType,9))?a.documentElement:a,bup=b && b.parentNode;return stringTraceTripleEqual(a,bup) || !!(bup && stringTraceTripleEqual(bup.nodeType,1) && (stringTraceUseValue(adown.contains)?adown.contains(bup):a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));}:function(a,b){if(b){while(stringTraceUseValue(b = b.parentNode)) {if(stringTraceTripleEqual(b,a)){return true;}}}return false;}; /* Sorting
	---------------------------------------------------------------------- */ // Document order sorting
sortOrder = stringTraceUseValue(hasCompare)?function(a,b){ // Flag for duplicate removal
if(stringTraceTripleEqual(a,b)){hasDuplicate = true;return 0;} // Sort on method existence if only one input has compareDocumentPosition
var compare=!a.compareDocumentPosition - !b.compareDocumentPosition;if(compare){return compare;} // Calculate position if both inputs belong to the same document
compare = stringTraceUseValue(stringTraceTripleEqual(a.ownerDocument || a,b.ownerDocument || b))?a.compareDocumentPosition(b): // Otherwise we know they are disconnected
1; // Disconnected nodes
if(compare & 1 || !support.sortDetached && stringTraceTripleEqual(b.compareDocumentPosition(a),compare)){ // Choose the first element that is related to our preferred document
if(stringTraceTripleEqual(a,doc) || stringTraceTripleEqual(a.ownerDocument,preferredDoc) && contains(preferredDoc,a)){return -1;}if(stringTraceTripleEqual(b,doc) || stringTraceTripleEqual(b.ownerDocument,preferredDoc) && contains(preferredDoc,b)){return 1;} // Maintain original order
return stringTraceUseValue(sortInput)?indexOf(sortInput,a) - indexOf(sortInput,b):0;}return stringTraceUseValue(compare & 4)?-1:1;}:function(a,b){ // Exit early if the nodes are identical
if(stringTraceTripleEqual(a,b)){hasDuplicate = true;return 0;}var cur,i=0,aup=a.parentNode,bup=b.parentNode,ap=[a],bp=[b]; // Parentless nodes are either documents or disconnected
if(!aup || !bup){return stringTraceUseValue(stringTraceTripleEqual(a,doc))?-1:stringTraceUseValue(stringTraceTripleEqual(b,doc))?1:stringTraceUseValue(aup)?-1:stringTraceUseValue(bup)?1:stringTraceUseValue(sortInput)?indexOf(sortInput,a) - indexOf(sortInput,b):0; // If the nodes are siblings, we can do a quick check
}else if(stringTraceTripleEqual(aup,bup)){return siblingCheck(a,b);} // Otherwise we need full lists of their ancestors for comparison
cur = a;while(stringTraceUseValue(cur = cur.parentNode)) {ap.unshift(cur);}cur = b;while(stringTraceUseValue(cur = cur.parentNode)) {bp.unshift(cur);} // Walk down the tree looking for a discrepancy
while(stringTraceUseValue(stringTraceTripleEqual(ap[i],bp[i]))) {i++;}return stringTraceUseValue(i)? // Do a sibling check if the nodes have a common ancestor
siblingCheck(ap[i],bp[i]): // Otherwise nodes in our document sort first
stringTraceUseValue(stringTraceTripleEqual(ap[i],preferredDoc))?-1:stringTraceUseValue(stringTraceTripleEqual(bp[i],preferredDoc))?1:0;};return doc;};Sizzle.matches = function(expr,elements){return Sizzle(expr,null,null,elements);};Sizzle.matchesSelector = function(elem,expr){ // Set document vars if needed
if(stringTraceNotTripleEqual(elem.ownerDocument || elem,document)){setDocument(elem);} // Make sure that attribute selectors are quoted
expr = expr.replace(rattributeQuotes,stringTrace("='$1']"));if(support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))){try{var ret=matches.call(elem,expr); // IE 9's matchesSelector returns false on disconnected nodes
if(ret || support.disconnectedMatch ||  // As well, disconnected nodes are said to be in a document
// fragment in IE 9
elem.document && stringTraceNotTripleEqual(elem.document.nodeType,11)){return ret;}}catch(e) {}}return Sizzle(expr,document,null,[elem]).length > 0;};Sizzle.contains = function(context,elem){ // Set document vars if needed
if(stringTraceNotTripleEqual(context.ownerDocument || context,document)){setDocument(context);}return contains(context,elem);};Sizzle.attr = function(elem,name){ // Set document vars if needed
if(stringTraceNotTripleEqual(elem.ownerDocument || elem,document)){setDocument(elem);}var fn=Expr.attrHandle[name.toLowerCase()], // Don't get fooled by Object.prototype properties (jQuery #13807)
val=stringTraceUseValue(fn && hasOwn.call(Expr.attrHandle,name.toLowerCase()))?fn(elem,name,!documentIsHTML):undefined;return stringTraceUseValue(stringTraceNotTripleEqual(val,undefined))?val:stringTraceUseValue(support.attributes || !documentIsHTML)?elem.getAttribute(name):stringTraceUseValue((val = elem.getAttributeNode(name)) && val.specified)?val.value:null;};Sizzle.error = function(msg){throw new Error(stringTraceAdd(stringTrace("Syntax error, unrecognized expression: "),msg));}; /**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */Sizzle.uniqueSort = function(results){var elem,duplicates=[],j=0,i=0; // Unless we *know* we can detect duplicates, assume their presence
hasDuplicate = !support.detectDuplicates;sortInput = !support.sortStable && results.slice(0);results.sort(sortOrder);if(hasDuplicate){while(stringTraceUseValue(elem = results[i++])) {if(stringTraceTripleEqual(elem,results[i])){j = duplicates.push(i);}}while(stringTraceUseValue(j--)) {results.splice(duplicates[j],1);}} // Clear input after sorting to release objects
// See https://github.com/jquery/sizzle/pull/225
sortInput = null;return results;}; /**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */getText = Sizzle.getText = function(elem){var node,ret=stringTrace(""),i=0,nodeType=elem.nodeType;if(!nodeType){ // If no nodeType, this is expected to be an array
while(stringTraceUseValue(node = elem[i++])) { // Do not traverse comment nodes
ret = stringTraceAdd(ret,getText(node));}}else if(stringTraceTripleEqual(nodeType,1) || stringTraceTripleEqual(nodeType,9) || stringTraceTripleEqual(nodeType,11)){ // Use textContent for elements
// innerText usage removed for consistency of new lines (jQuery #11153)
if(stringTraceTripleEqual(typeof elem.textContent === "undefined"?"undefined":stringTraceTypeOf(elem.textContent),stringTrace("string"))){return elem.textContent;}else { // Traverse its children
for(elem = elem.firstChild;elem;elem = elem.nextSibling) {ret = stringTraceAdd(ret,getText(elem));}}}else if(stringTraceTripleEqual(nodeType,3) || stringTraceTripleEqual(nodeType,4)){return elem.nodeValue;} // Do not include comment or processing instruction nodes
return ret;};Expr = Sizzle.selectors = { // Can be adjusted by the user
cacheLength:50,createPseudo:markFunction,match:matchExpr,attrHandle:{},find:{},relative:{">":{dir:stringTrace("parentNode"),first:true}," ":{dir:stringTrace("parentNode")},"+":{dir:stringTrace("previousSibling"),first:true},"~":{dir:stringTrace("previousSibling")}},preFilter:{"ATTR":function(match){match[1] = match[1].replace(runescape,funescape); // Move the given value to match[3] whether quoted or unquoted
match[3] = (match[3] || match[4] || match[5] || stringTrace("")).replace(runescape,funescape);if(stringTraceTripleEqual(match[2],stringTrace("~="))){match[3] = stringTraceAdd(stringTraceAdd(stringTrace(" "),match[3]),stringTrace(" "));}return match.slice(0,4);},"CHILD":function(match){ /* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/match[1] = match[1].toLowerCase();if(stringTraceTripleEqual(match[1].slice(0,3),stringTrace("nth"))){ // nth-* requires argument
if(!match[3]){Sizzle.error(match[0]);} // numeric x and y parameters for Expr.filter.CHILD
// remember that false/true cast respectively to 0/1
match[4] = +(stringTraceUseValue(match[4])?stringTraceAdd(match[5],match[6] || 1):2 * (stringTraceTripleEqual(match[3],stringTrace("even")) || stringTraceTripleEqual(match[3],stringTrace("odd"))));match[5] = +(stringTraceAdd(match[7],match[8]) || stringTraceTripleEqual(match[3],stringTrace("odd"))); // other types prohibit arguments
}else if(match[3]){Sizzle.error(match[0]);}return match;},"PSEUDO":function(match){var excess,unquoted=!match[6] && match[2];if(matchExpr[stringTrace("CHILD")].test(match[0])){return null;} // Accept quoted arguments as-is
if(match[3]){match[2] = match[4] || match[5] || stringTrace(""); // Strip excess characters from unquoted arguments
}else if(unquoted && rpseudo.test(unquoted) && ( // Get excess from tokenize (recursively)
excess = tokenize(unquoted,true)) && ( // advance to the next closing parenthesis
excess = unquoted.indexOf(stringTrace(")"),unquoted.length - excess) - unquoted.length)){ // excess is a negative index
match[0] = match[0].slice(0,excess);match[2] = unquoted.slice(0,excess);} // Return only captures needed by the pseudo filter method (type and argument)
return match.slice(0,3);}},filter:{"TAG":function(nodeNameSelector){var nodeName=nodeNameSelector.replace(runescape,funescape).toLowerCase();return stringTraceUseValue(stringTraceTripleEqual(nodeNameSelector,stringTrace("*")))?function(){return true;}:function(elem){return elem.nodeName && stringTraceTripleEqual(elem.nodeName.toLowerCase(),nodeName);};},"CLASS":function(className){var pattern=classCache[stringTraceAdd(className,stringTrace(" "))];return pattern || (pattern = new RegExp(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTrace("(^|"),whitespace),stringTrace(")")),className),stringTrace("(")),whitespace),stringTrace("|$)")))) && classCache(className,function(elem){return pattern.test(stringTraceTripleEqual(typeof elem.className === "undefined"?"undefined":stringTraceTypeOf(elem.className),stringTrace("string")) && elem.className || stringTraceNotTripleEqual(typeof elem.getAttribute === "undefined"?"undefined":stringTraceTypeOf(elem.getAttribute),stringTrace("undefined")) && elem.getAttribute(stringTrace("class")) || stringTrace(""));});},"ATTR":function(name,operator,check){return function(elem){var result=Sizzle.attr(elem,name);if(result == null){return stringTraceTripleEqual(operator,stringTrace("!="));}if(!operator){return true;}result = stringTraceAdd(result,stringTrace(""));return stringTraceUseValue(stringTraceTripleEqual(operator,stringTrace("=")))?stringTraceTripleEqual(result,check):stringTraceUseValue(stringTraceTripleEqual(operator,stringTrace("!=")))?stringTraceNotTripleEqual(result,check):stringTraceUseValue(stringTraceTripleEqual(operator,stringTrace("^=")))?check && stringTraceTripleEqual(result.indexOf(check),0):stringTraceUseValue(stringTraceTripleEqual(operator,stringTrace("*=")))?check && result.indexOf(check) > -1:stringTraceUseValue(stringTraceTripleEqual(operator,stringTrace("$=")))?check && stringTraceTripleEqual(result.slice(-check.length),check):stringTraceUseValue(stringTraceTripleEqual(operator,stringTrace("~=")))?stringTraceAdd(stringTraceAdd(stringTrace(" "),result.replace(rwhitespace,stringTrace(" "))),stringTrace(" ")).indexOf(check) > -1:stringTraceUseValue(stringTraceTripleEqual(operator,stringTrace("|=")))?stringTraceTripleEqual(result,check) || stringTraceTripleEqual(result.slice(0,stringTraceAdd(check.length,1)),stringTraceAdd(check,stringTrace("-"))):false;};},"CHILD":function(type,what,argument,first,last){var simple=stringTraceNotTripleEqual(type.slice(0,3),stringTrace("nth")),forward=stringTraceNotTripleEqual(type.slice(-4),stringTrace("last")),ofType=stringTraceTripleEqual(what,stringTrace("of-type"));return stringTraceUseValue(stringTraceTripleEqual(first,1) && stringTraceTripleEqual(last,0))? // Shortcut for :nth-*(n)
function(elem){return !!elem.parentNode;}:function(elem,context,xml){var cache,outerCache,node,diff,nodeIndex,start,dir=stringTraceUseValue(stringTraceNotTripleEqual(simple,forward))?stringTrace("nextSibling"):stringTrace("previousSibling"),parent=elem.parentNode,name=ofType && elem.nodeName.toLowerCase(),useCache=!xml && !ofType;if(parent){ // :(first|last|only)-(child|of-type)
if(simple){while(stringTraceUseValue(dir)) {node = elem;while(stringTraceUseValue(node = node[dir])) {if(stringTraceUseValue(ofType)?stringTraceTripleEqual(node.nodeName.toLowerCase(),name):stringTraceTripleEqual(node.nodeType,1)){return false;}} // Reverse direction for :only-* (if we haven't yet done so)
start = dir = stringTraceTripleEqual(type,stringTrace("only")) && !start && stringTrace("nextSibling");}return true;}start = [stringTraceUseValue(forward)?parent.firstChild:parent.lastChild]; // non-xml :nth-child(...) stores cache data on `parent`
if(forward && useCache){ // Seek `elem` from a previously-cached index
outerCache = parent[expando] || (parent[expando] = {});cache = outerCache[type] || [];nodeIndex = stringTraceTripleEqual(cache[0],dirruns) && cache[1];diff = stringTraceTripleEqual(cache[0],dirruns) && cache[2];node = nodeIndex && parent.childNodes[nodeIndex];while(stringTraceUseValue(node = ++nodeIndex && node && node[dir] || ( // Fallback to seeking `elem` from the start
diff = nodeIndex = 0) || start.pop())) { // When found, cache indexes on `parent` and break
if(stringTraceTripleEqual(node.nodeType,1) && ++diff && stringTraceTripleEqual(node,elem)){outerCache[type] = [dirruns,nodeIndex,diff];break;}} // Use previously-cached element index if available
}else if(useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && stringTraceTripleEqual(cache[0],dirruns)){diff = cache[1]; // xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
}else { // Use the same loop as above to seek `elem` from the start
while(stringTraceUseValue(node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop())) {if((stringTraceUseValue(ofType)?stringTraceTripleEqual(node.nodeName.toLowerCase(),name):stringTraceTripleEqual(node.nodeType,1)) && ++diff){ // Cache the index of each encountered element
if(useCache){(node[expando] || (node[expando] = {}))[type] = [dirruns,diff];}if(stringTraceTripleEqual(node,elem)){break;}}}} // Incorporate the offset, then check against cycle size
diff -= last;return stringTraceTripleEqual(diff,first) || stringTraceTripleEqual(diff % first,0) && diff / first >= 0;}};},"PSEUDO":function(pseudo,argument){ // pseudo-class names are case-insensitive
// http://www.w3.org/TR/selectors/#pseudo-classes
// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
// Remember that setFilters inherits from pseudos
var args,fn=Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error(stringTraceAdd(stringTrace("unsupported pseudo: "),pseudo)); // The user may use createPseudo to indicate that
// arguments are needed to create the filter function
// just as Sizzle does
if(fn[expando]){return fn(argument);} // But maintain support for old signatures
if(fn.length > 1){args = [pseudo,pseudo,stringTrace(""),argument];return stringTraceUseValue(Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()))?markFunction(function(seed,matches){var idx,matched=fn(seed,argument),i=matched.length;while(stringTraceUseValue(i--)) {idx = indexOf(seed,matched[i]);seed[idx] = !(matches[idx] = matched[i]);}}):function(elem){return fn(elem,0,args);};}return fn;}},pseudos:{ // Potentially complex pseudos
"not":markFunction(function(selector){ // Trim the selector passed to compile
// to avoid treating leading and trailing
// spaces as combinators
var input=[],results=[],matcher=compile(selector.replace(rtrim,stringTrace("$1")));return stringTraceUseValue(matcher[expando])?markFunction(function(seed,matches,context,xml){var elem,unmatched=matcher(seed,null,xml,[]),i=seed.length; // Match elements unmatched by `matcher`
while(stringTraceUseValue(i--)) {if(elem = unmatched[i]){seed[i] = !(matches[i] = elem);}}}):function(elem,context,xml){input[0] = elem;matcher(input,null,xml,results); // Don't keep the element (issue #299)
input[0] = null;return !results.pop();};}),"has":markFunction(function(selector){return function(elem){return Sizzle(selector,elem).length > 0;};}),"contains":markFunction(function(text){text = text.replace(runescape,funescape);return function(elem){return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;};}), // "Whether an element is represented by a :lang() selector
// is based solely on the element's language value
// being equal to the identifier C,
// or beginning with the identifier C immediately followed by "-".
// The matching of C against the element's language value is performed case-insensitively.
// The identifier C does not have to be a valid language name."
// http://www.w3.org/TR/selectors/#lang-pseudo
"lang":markFunction(function(lang){ // lang value must be a valid identifier
if(!ridentifier.test(lang || stringTrace(""))){Sizzle.error(stringTraceAdd(stringTrace("unsupported lang: "),lang));}lang = lang.replace(runescape,funescape).toLowerCase();return function(elem){var elemLang;do {if(elemLang = stringTraceUseValue(documentIsHTML)?elem.lang:elem.getAttribute(stringTrace("xml:lang")) || elem.getAttribute(stringTrace("lang"))){elemLang = elemLang.toLowerCase();return stringTraceTripleEqual(elemLang,lang) || stringTraceTripleEqual(elemLang.indexOf(stringTraceAdd(lang,stringTrace("-"))),0);}}while((elem = elem.parentNode) && stringTraceTripleEqual(elem.nodeType,1));return false;};}), // Miscellaneous
"target":function(elem){var hash=window.location && window.location.hash;return hash && stringTraceTripleEqual(hash.slice(1),elem.id);},"root":function(elem){return stringTraceTripleEqual(elem,docElem);},"focus":function(elem){return stringTraceTripleEqual(elem,document.activeElement) && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);}, // Boolean properties
"enabled":function(elem){return stringTraceTripleEqual(elem.disabled,false);},"disabled":function(elem){return stringTraceTripleEqual(elem.disabled,true);},"checked":function(elem){ // In CSS3, :checked should return both checked and selected elements
// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
var nodeName=elem.nodeName.toLowerCase();return stringTraceTripleEqual(nodeName,stringTrace("input")) && !!elem.checked || stringTraceTripleEqual(nodeName,stringTrace("option")) && !!elem.selected;},"selected":function(elem){ // Accessing this property makes selected-by-default
// options in Safari work properly
if(elem.parentNode){elem.parentNode.selectedIndex;}return stringTraceTripleEqual(elem.selected,true);}, // Contents
"empty":function(elem){ // http://www.w3.org/TR/selectors/#empty-pseudo
// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
//   but not by others (comment: 8; processing instruction: 7; etc.)
// nodeType < 6 works because attributes (2) do not appear as children
for(elem = elem.firstChild;elem;elem = elem.nextSibling) {if(elem.nodeType < 6){return false;}}return true;},"parent":function(elem){return !Expr.pseudos[stringTrace("empty")](elem);}, // Element/input types
"header":function(elem){return rheader.test(elem.nodeName);},"input":function(elem){return rinputs.test(elem.nodeName);},"button":function(elem){var name=elem.nodeName.toLowerCase();return stringTraceTripleEqual(name,stringTrace("input")) && stringTraceTripleEqual(elem.type,stringTrace("button")) || stringTraceTripleEqual(name,stringTrace("button"));},"text":function(elem){var attr;return stringTraceTripleEqual(elem.nodeName.toLowerCase(),stringTrace("input")) && stringTraceTripleEqual(elem.type,stringTrace("text")) && ( // Support: IE<8
// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
(attr = elem.getAttribute(stringTrace("type"))) == null || stringTraceTripleEqual(attr.toLowerCase(),stringTrace("text")));}, // Position-in-collection
"first":createPositionalPseudo(function(){return [0];}),"last":createPositionalPseudo(function(matchIndexes,length){return [length - 1];}),"eq":createPositionalPseudo(function(matchIndexes,length,argument){return [stringTraceUseValue(argument < 0)?stringTraceAdd(argument,length):argument];}),"even":createPositionalPseudo(function(matchIndexes,length){var i=0;for(;i < length;i = stringTraceAdd(i,2)) {matchIndexes.push(i);}return matchIndexes;}),"odd":createPositionalPseudo(function(matchIndexes,length){var i=1;for(;i < length;i = stringTraceAdd(i,2)) {matchIndexes.push(i);}return matchIndexes;}),"lt":createPositionalPseudo(function(matchIndexes,length,argument){var i=stringTraceUseValue(argument < 0)?stringTraceAdd(argument,length):argument;for(;--i >= 0;) {matchIndexes.push(i);}return matchIndexes;}),"gt":createPositionalPseudo(function(matchIndexes,length,argument){var i=stringTraceUseValue(argument < 0)?stringTraceAdd(argument,length):argument;for(;++i < length;) {matchIndexes.push(i);}return matchIndexes;})}};Expr.pseudos[stringTrace("nth")] = Expr.pseudos[stringTrace("eq")]; // Add button/input type pseudos
for(i in {radio:true,checkbox:true,file:true,password:true,image:true}) {Expr.pseudos[i] = createInputPseudo(i);}for(i in {submit:true,reset:true}) {Expr.pseudos[i] = createButtonPseudo(i);} // Easy API for creating new setFilters
function setFilters(){}setFilters.prototype = Expr.filters = Expr.pseudos;Expr.setFilters = new setFilters();tokenize = Sizzle.tokenize = function(selector,parseOnly){var matched,match,tokens,type,soFar,groups,preFilters,cached=tokenCache[stringTraceAdd(selector,stringTrace(" "))];if(cached){return stringTraceUseValue(parseOnly)?0:cached.slice(0);}soFar = selector;groups = [];preFilters = Expr.preFilter;while(stringTraceUseValue(soFar)) { // Comma and first run
if(!matched || (match = rcomma.exec(soFar))){if(match){ // Don't consume trailing commas as valid
soFar = soFar.slice(match[0].length) || soFar;}groups.push(tokens = []);}matched = false; // Combinators
if(match = rcombinators.exec(soFar)){matched = match.shift();tokens.push({value:matched, // Cast descendant combinators to space
type:match[0].replace(rtrim,stringTrace(" "))});soFar = soFar.slice(matched.length);} // Filters
for(type in Expr.filter) {if((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))){matched = match.shift();tokens.push({value:matched,type:type,matches:match});soFar = soFar.slice(matched.length);}}if(!matched){break;}} // Return the length of the invalid excess
// if we're just parsing
// Otherwise, throw an error or return tokens
return stringTraceUseValue(parseOnly)?soFar.length:stringTraceUseValue(soFar)?Sizzle.error(selector): // Cache the tokens
tokenCache(selector,groups).slice(0);};function toSelector(tokens){var i=0,len=tokens.length,selector=stringTrace("");for(;i < len;i++) {selector = stringTraceAdd(selector,tokens[i].value);}return selector;}function addCombinator(matcher,combinator,base){var dir=combinator.dir,checkNonElements=base && stringTraceTripleEqual(dir,stringTrace("parentNode")),doneName=done++;return stringTraceUseValue(combinator.first)? // Check against closest ancestor/preceding element
function(elem,context,xml){while(stringTraceUseValue(elem = elem[dir])) {if(stringTraceTripleEqual(elem.nodeType,1) || checkNonElements){return matcher(elem,context,xml);}}}: // Check against all ancestor/preceding elements
function(elem,context,xml){var oldCache,outerCache,newCache=[dirruns,doneName]; // We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
if(xml){while(stringTraceUseValue(elem = elem[dir])) {if(stringTraceTripleEqual(elem.nodeType,1) || checkNonElements){if(matcher(elem,context,xml)){return true;}}}}else {while(stringTraceUseValue(elem = elem[dir])) {if(stringTraceTripleEqual(elem.nodeType,1) || checkNonElements){outerCache = elem[expando] || (elem[expando] = {});if((oldCache = outerCache[dir]) && stringTraceTripleEqual(oldCache[0],dirruns) && stringTraceTripleEqual(oldCache[1],doneName)){ // Assign to newCache so results back-propagate to previous elements
return newCache[2] = oldCache[2];}else { // Reuse newcache so results back-propagate to previous elements
outerCache[dir] = newCache; // A match means we're done; a fail means we have to keep checking
if(newCache[2] = matcher(elem,context,xml)){return true;}}}}}};}function elementMatcher(matchers){return stringTraceUseValue(matchers.length > 1)?function(elem,context,xml){var i=matchers.length;while(stringTraceUseValue(i--)) {if(!matchers[i](elem,context,xml)){return false;}}return true;}:matchers[0];}function multipleContexts(selector,contexts,results){var i=0,len=contexts.length;for(;i < len;i++) {Sizzle(selector,contexts[i],results);}return results;}function condense(unmatched,map,filter,context,xml){var elem,newUnmatched=[],i=0,len=unmatched.length,mapped=map != null;for(;i < len;i++) {if(elem = unmatched[i]){if(!filter || filter(elem,context,xml)){newUnmatched.push(elem);if(mapped){map.push(i);}}}}return newUnmatched;}function setMatcher(preFilter,selector,matcher,postFilter,postFinder,postSelector){if(postFilter && !postFilter[expando]){postFilter = setMatcher(postFilter);}if(postFinder && !postFinder[expando]){postFinder = setMatcher(postFinder,postSelector);}return markFunction(function(seed,results,context,xml){var temp,i,elem,preMap=[],postMap=[],preexisting=results.length, // Get initial elements from seed or context
elems=seed || multipleContexts(selector || stringTrace("*"),stringTraceUseValue(context.nodeType)?[context]:context,[]), // Prefilter to get matcher input, preserving a map for seed-results synchronization
matcherIn=stringTraceUseValue(preFilter && (seed || !selector))?condense(elems,preMap,preFilter,context,xml):elems,matcherOut=stringTraceUseValue(matcher)? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
stringTraceUseValue(postFinder || (stringTraceUseValue(seed)?preFilter:preexisting || postFilter))? // ...intermediate processing is necessary
[]: // ...otherwise use results directly
results:matcherIn; // Find primary matches
if(matcher){matcher(matcherIn,matcherOut,context,xml);} // Apply postFilter
if(postFilter){temp = condense(matcherOut,postMap);postFilter(temp,[],context,xml); // Un-match failing elements by moving them back to matcherIn
i = temp.length;while(stringTraceUseValue(i--)) {if(elem = temp[i]){matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);}}}if(seed){if(postFinder || preFilter){if(postFinder){ // Get the final matcherOut by condensing this intermediate into postFinder contexts
temp = [];i = matcherOut.length;while(stringTraceUseValue(i--)) {if(elem = matcherOut[i]){ // Restore matcherIn since elem is not yet a final match
temp.push(matcherIn[i] = elem);}}postFinder(null,matcherOut = [],temp,xml);} // Move matched elements from seed to results to keep them synchronized
i = matcherOut.length;while(stringTraceUseValue(i--)) {if((elem = matcherOut[i]) && (temp = stringTraceUseValue(postFinder)?indexOf(seed,elem):preMap[i]) > -1){seed[temp] = !(results[temp] = elem);}}} // Add elements to results, through postFinder if defined
}else {matcherOut = condense(stringTraceUseValue(stringTraceTripleEqual(matcherOut,results))?matcherOut.splice(preexisting,matcherOut.length):matcherOut);if(postFinder){postFinder(null,results,matcherOut,xml);}else {push.apply(results,matcherOut);}}});}function matcherFromTokens(tokens){var checkContext,matcher,j,len=tokens.length,leadingRelative=Expr.relative[tokens[0].type],implicitRelative=leadingRelative || Expr.relative[stringTrace(" ")],i=stringTraceUseValue(leadingRelative)?1:0, // The foundational matcher ensures that elements are reachable from top-level context(s)
matchContext=addCombinator(function(elem){return stringTraceTripleEqual(elem,checkContext);},implicitRelative,true),matchAnyContext=addCombinator(function(elem){return indexOf(checkContext,elem) > -1;},implicitRelative,true),matchers=[function(elem,context,xml){var ret=!leadingRelative && (xml || stringTraceNotTripleEqual(context,outermostContext)) || (stringTraceUseValue((checkContext = context).nodeType)?matchContext(elem,context,xml):matchAnyContext(elem,context,xml)); // Avoid hanging onto element (issue #299)
checkContext = null;return ret;}];for(;i < len;i++) {if(matcher = Expr.relative[tokens[i].type]){matchers = [addCombinator(elementMatcher(matchers),matcher)];}else {matcher = Expr.filter[tokens[i].type].apply(null,tokens[i].matches); // Return special upon seeing a positional matcher
if(matcher[expando]){ // Find the next relative operator (if any) for proper handling
j = ++i;for(;j < len;j++) {if(Expr.relative[tokens[j].type]){break;}}return setMatcher(i > 1 && elementMatcher(matchers),i > 1 && toSelector( // If the preceding token was a descendant combinator, insert an implicit any-element `*`
tokens.slice(0,i - 1).concat({value:stringTraceUseValue(stringTraceTripleEqual(tokens[i - 2].type,stringTrace(" ")))?stringTrace("*"):stringTrace("")})).replace(rtrim,stringTrace("$1")),matcher,i < j && matcherFromTokens(tokens.slice(i,j)),j < len && matcherFromTokens(tokens = tokens.slice(j)),j < len && toSelector(tokens));}matchers.push(matcher);}}return elementMatcher(matchers);}function matcherFromGroupMatchers(elementMatchers,setMatchers){var bySet=setMatchers.length > 0,byElement=elementMatchers.length > 0,superMatcher=function(seed,context,xml,results,outermost){var elem,j,matcher,matchedCount=0,i=stringTrace("0"),unmatched=seed && [],setMatched=[],contextBackup=outermostContext, // We must always have either seed elements or outermost context
elems=seed || byElement && Expr.find[stringTrace("TAG")](stringTrace("*"),outermost), // Use integer dirruns iff this is the outermost matcher
dirrunsUnique=dirruns = stringTraceAdd(dirruns,stringTraceUseValue(contextBackup == null)?1:Math.random() || 0.1),len=elems.length;if(outermost){outermostContext = stringTraceNotTripleEqual(context,document) && context;} // Add elements passing elementMatchers directly to results
// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
// Support: IE<9, Safari
// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
for(;stringTraceNotTripleEqual(i,len) && (elem = elems[i]) != null;i++) {if(byElement && elem){j = 0;while(stringTraceUseValue(matcher = elementMatchers[j++])) {if(matcher(elem,context,xml)){results.push(elem);break;}}if(outermost){dirruns = dirrunsUnique;}} // Track unmatched elements for set filters
if(bySet){ // They will have gone through all possible matchers
if(elem = !matcher && elem){matchedCount--;} // Lengthen the array for every element, matched or not
if(seed){unmatched.push(elem);}}} // Apply set filters to unmatched elements
matchedCount = stringTraceAdd(matchedCount,i);if(bySet && stringTraceNotTripleEqual(i,matchedCount)){j = 0;while(stringTraceUseValue(matcher = setMatchers[j++])) {matcher(unmatched,setMatched,context,xml);}if(seed){ // Reintegrate element matches to eliminate the need for sorting
if(matchedCount > 0){while(stringTraceUseValue(i--)) {if(!(unmatched[i] || setMatched[i])){setMatched[i] = pop.call(results);}}} // Discard index placeholder values to get only actual matches
setMatched = condense(setMatched);} // Add matches to results
push.apply(results,setMatched); // Seedless set matches succeeding multiple successful matchers stipulate sorting
if(outermost && !seed && setMatched.length > 0 && stringTraceAdd(matchedCount,setMatchers.length) > 1){Sizzle.uniqueSort(results);}} // Override manipulation of globals by nested matchers
if(outermost){dirruns = dirrunsUnique;outermostContext = contextBackup;}return unmatched;};return stringTraceUseValue(bySet)?markFunction(superMatcher):superMatcher;}compile = Sizzle.compile = function(selector,match /* Internal Use Only */){var i,setMatchers=[],elementMatchers=[],cached=compilerCache[stringTraceAdd(selector,stringTrace(" "))];if(!cached){ // Generate a function of recursive functions that can be used to check each element
if(!match){match = tokenize(selector);}i = match.length;while(stringTraceUseValue(i--)) {cached = matcherFromTokens(match[i]);if(cached[expando]){setMatchers.push(cached);}else {elementMatchers.push(cached);}} // Cache the compiled function
cached = compilerCache(selector,matcherFromGroupMatchers(elementMatchers,setMatchers)); // Save selector and tokenization
cached.selector = selector;}return cached;}; /**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */select = Sizzle.select = function(selector,context,results,seed){var i,tokens,token,type,find,compiled=stringTraceTripleEqual(typeof selector === "undefined"?"undefined":stringTraceTypeOf(selector),stringTrace("function")) && selector,match=!seed && tokenize(selector = compiled.selector || selector);results = results || []; // Try to minimize operations if there is no seed and only one group
if(stringTraceTripleEqual(match.length,1)){ // Take a shortcut and set the context if the root selector is an ID
tokens = match[0] = match[0].slice(0);if(tokens.length > 2 && stringTraceTripleEqual((token = tokens[0]).type,stringTrace("ID")) && support.getById && stringTraceTripleEqual(context.nodeType,9) && documentIsHTML && Expr.relative[tokens[1].type]){context = (Expr.find[stringTrace("ID")](token.matches[0].replace(runescape,funescape),context) || [])[0];if(!context){return results; // Precompiled matchers will still verify ancestry, so step up a level
}else if(compiled){context = context.parentNode;}selector = selector.slice(tokens.shift().value.length);} // Fetch a seed set for right-to-left matching
i = stringTraceUseValue(matchExpr[stringTrace("needsContext")].test(selector))?0:tokens.length;while(stringTraceUseValue(i--)) {token = tokens[i]; // Abort if we hit a combinator
if(Expr.relative[type = token.type]){break;}if(find = Expr.find[type]){ // Search, expanding context for leading sibling combinators
if(seed = find(token.matches[0].replace(runescape,funescape),rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)){ // If seed is empty or no tokens remain, we can return early
tokens.splice(i,1);selector = seed.length && toSelector(tokens);if(!selector){push.apply(results,seed);return results;}break;}}}} // Compile and execute a filtering function if one is not provided
// Provide `match` to avoid retokenization if we modified the selector above
(compiled || compile(selector,match))(seed,context,!documentIsHTML,results,rsibling.test(selector) && testContext(context.parentNode) || context);return results;}; // One-time assignments
// Sort stability
support.sortStable = stringTraceTripleEqual(expando.split(stringTrace("")).sort(sortOrder).join(stringTrace("")),expando); // Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate; // Initialize against the default document
setDocument(); // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function(div1){ // Should return 1, but returns 4 (following)
return div1.compareDocumentPosition(document.createElement(stringTrace("div"))) & 1;}); // Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if(!assert(function(div){stringTraceSetInnerHTML(div,stringTrace("<a href='#'></a>"));return stringTraceTripleEqual(div.firstChild.getAttribute(stringTrace("href")),stringTrace("#"));})){addHandle(stringTrace("type|href|height|width"),function(elem,name,isXML){if(!isXML){return elem.getAttribute(name,stringTraceUseValue(stringTraceTripleEqual(name.toLowerCase(),stringTrace("type")))?1:2);}});} // Support: IE<9
// Use defaultValue in place of getAttribute("value")
if(!support.attributes || !assert(function(div){stringTraceSetInnerHTML(div,stringTrace("<input/>"));div.firstChild.setAttribute(stringTrace("value"),stringTrace(""));return stringTraceTripleEqual(div.firstChild.getAttribute(stringTrace("value")),stringTrace(""));})){addHandle(stringTrace("value"),function(elem,name,isXML){if(!isXML && stringTraceTripleEqual(elem.nodeName.toLowerCase(),stringTrace("input"))){return elem.defaultValue;}});} // Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if(!assert(function(div){return div.getAttribute(stringTrace("disabled")) == null;})){addHandle(booleans,function(elem,name,isXML){var val;if(!isXML){return stringTraceUseValue(stringTraceTripleEqual(elem[name],true))?name.toLowerCase():stringTraceUseValue((val = elem.getAttributeNode(name)) && val.specified)?val.value:null;}});}return Sizzle;})(window);jQuery.find = Sizzle;jQuery.expr = Sizzle.selectors;jQuery.expr[stringTrace(":")] = jQuery.expr.pseudos;jQuery.unique = Sizzle.uniqueSort;jQuery.text = Sizzle.getText;jQuery.isXMLDoc = Sizzle.isXML;jQuery.contains = Sizzle.contains;var rneedsContext=jQuery.expr.match.needsContext;var rsingleTag=/^<(\w+)\s*\/?>(?:<\/\1>|)$/;var risSimple=/^.[^:#\[\.,]*$/; // Implement the identical functionality for filter and not
function winnow(elements,qualifier,not){if(jQuery.isFunction(qualifier)){return jQuery.grep(elements,function(elem,i){ /* jshint -W018 */return stringTraceNotTripleEqual(!!qualifier.call(elem,i,elem),not);});}if(qualifier.nodeType){return jQuery.grep(elements,function(elem){return stringTraceNotTripleEqual(stringTraceTripleEqual(elem,qualifier),not);});}if(stringTraceTripleEqual(typeof qualifier === "undefined"?"undefined":stringTraceTypeOf(qualifier),stringTrace("string"))){if(risSimple.test(qualifier)){return jQuery.filter(qualifier,elements,not);}qualifier = jQuery.filter(qualifier,elements);}return jQuery.grep(elements,function(elem){return stringTraceNotTripleEqual(indexOf.call(qualifier,elem) >= 0,not);});}jQuery.filter = function(expr,elems,not){var elem=elems[0];if(not){expr = stringTraceAdd(stringTraceAdd(stringTrace(":not("),expr),stringTrace(")"));}return stringTraceUseValue(stringTraceTripleEqual(elems.length,1) && stringTraceTripleEqual(elem.nodeType,1))?stringTraceUseValue(jQuery.find.matchesSelector(elem,expr))?[elem]:[]:jQuery.find.matches(expr,jQuery.grep(elems,function(elem){return stringTraceTripleEqual(elem.nodeType,1);}));};jQuery.fn.extend({find:function(selector){var i,len=this.length,ret=[],self=this;if(stringTraceNotTripleEqual(typeof selector === "undefined"?"undefined":stringTraceTypeOf(selector),stringTrace("string"))){return this.pushStack(jQuery(selector).filter(function(){for(i = 0;i < len;i++) {if(jQuery.contains(self[i],this)){return true;}}}));}for(i = 0;i < len;i++) {jQuery.find(selector,self[i],ret);} // Needed because $( selector, context ) becomes $( context ).find( selector )
ret = this.pushStack(stringTraceUseValue(len > 1)?jQuery.unique(ret):ret);ret.selector = stringTraceUseValue(this.selector)?stringTraceAdd(stringTraceAdd(this.selector,stringTrace(" ")),selector):selector;return ret;},filter:function(selector){return this.pushStack(winnow(this,selector || [],false));},not:function(selector){return this.pushStack(winnow(this,selector || [],true));},is:function(selector){return !!winnow(this, // If this is a positional/relative selector, check membership in the returned set
// so $("p:first").is("p:last") won't return true for a doc with two "p".
stringTraceUseValue(stringTraceTripleEqual(typeof selector === "undefined"?"undefined":stringTraceTypeOf(selector),stringTrace("string")) && rneedsContext.test(selector))?jQuery(selector):selector || [],false).length;}}); // Initialize a jQuery object
// A central reference to the root jQuery(document)
var rootjQuery, // A simple way to check for HTML strings
// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
// Strict HTML recognition (#11290: must start with <)
rquickExpr=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,init=jQuery.fn.init = function(selector,context){var match,elem; // HANDLE: $(""), $(null), $(undefined), $(false)
if(!selector){return this;} // Handle HTML strings
if(stringTraceTripleEqual(typeof selector === "undefined"?"undefined":stringTraceTypeOf(selector),stringTrace("string"))){if(stringTraceTripleEqual(selector[0],stringTrace("<")) && stringTraceTripleEqual(selector[selector.length - 1],stringTrace(">")) && selector.length >= 3){ // Assume that strings that start and end with <> are HTML and skip the regex check
match = [null,selector,null];}else {match = rquickExpr.exec(selector);} // Match html or make sure no context is specified for #id
if(match && (match[1] || !context)){ // HANDLE: $(html) -> $(array)
if(match[1]){context = stringTraceUseValue(context instanceof jQuery)?context[0]:context; // Option to run scripts is true for back-compat
// Intentionally let the error be thrown if parseHTML is not present
jQuery.merge(this,jQuery.parseHTML(match[1],stringTraceUseValue(context && context.nodeType)?context.ownerDocument || context:document,true)); // HANDLE: $(html, props)
if(rsingleTag.test(match[1]) && jQuery.isPlainObject(context)){for(match in context) { // Properties of context are called as methods if possible
if(jQuery.isFunction(this[match])){this[match](context[match]); // ...and otherwise set as attributes
}else {this.attr(match,context[match]);}}}return this; // HANDLE: $(#id)
}else {elem = document.getElementById(match[2]); // Support: Blackberry 4.6
// gEBID returns nodes no longer in the document (#6963)
if(elem && elem.parentNode){ // Inject the element directly into the jQuery object
this.length = 1;this[0] = elem;}this.context = document;this.selector = selector;return this;} // HANDLE: $(expr, $(...))
}else if(!context || context.jquery){return (context || rootjQuery).find(selector); // HANDLE: $(expr, context)
// (which is just equivalent to: $(context).find(expr)
}else {return this.constructor(context).find(selector);} // HANDLE: $(DOMElement)
}else if(selector.nodeType){this.context = this[0] = selector;this.length = 1;return this; // HANDLE: $(function)
// Shortcut for document ready
}else if(jQuery.isFunction(selector)){return stringTraceUseValue(stringTraceNotTripleEqual(typeof rootjQuery.ready === "undefined"?"undefined":stringTraceTypeOf(rootjQuery.ready),stringTrace("undefined")))?rootjQuery.ready(selector): // Execute immediately if ready is not present
selector(jQuery);}if(stringTraceNotTripleEqual(selector.selector,undefined)){this.selector = selector.selector;this.context = selector.context;}return jQuery.makeArray(selector,this);}; // Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn; // Initialize central reference
rootjQuery = jQuery(document);var rparentsprev=/^(?:parents|prev(?:Until|All))/, // Methods guaranteed to produce a unique set when starting from a unique set
guaranteedUnique={children:true,contents:true,next:true,prev:true};jQuery.extend({dir:function(elem,dir,until){var matched=[],truncate=stringTraceNotTripleEqual(until,undefined);while(stringTraceUseValue((elem = elem[dir]) && stringTraceNotTripleEqual(elem.nodeType,9))) {if(stringTraceTripleEqual(elem.nodeType,1)){if(truncate && jQuery(elem).is(until)){break;}matched.push(elem);}}return matched;},sibling:function(n,elem){var matched=[];for(;n;n = n.nextSibling) {if(stringTraceTripleEqual(n.nodeType,1) && stringTraceNotTripleEqual(n,elem)){matched.push(n);}}return matched;}});jQuery.fn.extend({has:function(target){var targets=jQuery(target,this),l=targets.length;return this.filter(function(){var i=0;for(;i < l;i++) {if(jQuery.contains(this,targets[i])){return true;}}});},closest:function(selectors,context){var cur,i=0,l=this.length,matched=[],pos=stringTraceUseValue(rneedsContext.test(selectors) || stringTraceNotTripleEqual(typeof selectors === "undefined"?"undefined":stringTraceTypeOf(selectors),stringTrace("string")))?jQuery(selectors,context || this.context):0;for(;i < l;i++) {for(cur = this[i];cur && stringTraceNotTripleEqual(cur,context);cur = cur.parentNode) { // Always skip document fragments
if(cur.nodeType < 11 && (stringTraceUseValue(pos)?pos.index(cur) > -1: // Don't pass non-elements to Sizzle
stringTraceTripleEqual(cur.nodeType,1) && jQuery.find.matchesSelector(cur,selectors))){matched.push(cur);break;}}}return this.pushStack(stringTraceUseValue(matched.length > 1)?jQuery.unique(matched):matched);}, // Determine the position of an element within the set
index:function(elem){ // No argument, return index in parent
if(!elem){return stringTraceUseValue(this[0] && this[0].parentNode)?this.first().prevAll().length:-1;} // Index in selector
if(stringTraceTripleEqual(typeof elem === "undefined"?"undefined":stringTraceTypeOf(elem),stringTrace("string"))){return indexOf.call(jQuery(elem),this[0]);} // Locate the position of the desired element
return indexOf.call(this, // If it receives a jQuery object, the first element is used
stringTraceUseValue(elem.jquery)?elem[0]:elem);},add:function(selector,context){return this.pushStack(jQuery.unique(jQuery.merge(this.get(),jQuery(selector,context))));},addBack:function(selector){return this.add(stringTraceUseValue(selector == null)?this.prevObject:this.prevObject.filter(selector));}});function sibling(cur,dir){while(stringTraceUseValue((cur = cur[dir]) && stringTraceNotTripleEqual(cur.nodeType,1))) {}return cur;}jQuery.each({parent:function(elem){var parent=elem.parentNode;return stringTraceUseValue(parent && stringTraceNotTripleEqual(parent.nodeType,11))?parent:null;},parents:function(elem){return jQuery.dir(elem,stringTrace("parentNode"));},parentsUntil:function(elem,i,until){return jQuery.dir(elem,stringTrace("parentNode"),until);},next:function(elem){return sibling(elem,stringTrace("nextSibling"));},prev:function(elem){return sibling(elem,stringTrace("previousSibling"));},nextAll:function(elem){return jQuery.dir(elem,stringTrace("nextSibling"));},prevAll:function(elem){return jQuery.dir(elem,stringTrace("previousSibling"));},nextUntil:function(elem,i,until){return jQuery.dir(elem,stringTrace("nextSibling"),until);},prevUntil:function(elem,i,until){return jQuery.dir(elem,stringTrace("previousSibling"),until);},siblings:function(elem){return jQuery.sibling((elem.parentNode || {}).firstChild,elem);},children:function(elem){return jQuery.sibling(elem.firstChild);},contents:function(elem){return elem.contentDocument || jQuery.merge([],elem.childNodes);}},function(name,fn){jQuery.fn[name] = function(until,selector){var matched=jQuery.map(this,fn,until);if(stringTraceNotTripleEqual(name.slice(-5),stringTrace("Until"))){selector = until;}if(selector && stringTraceTripleEqual(typeof selector === "undefined"?"undefined":stringTraceTypeOf(selector),stringTrace("string"))){matched = jQuery.filter(selector,matched);}if(this.length > 1){ // Remove duplicates
if(!guaranteedUnique[name]){jQuery.unique(matched);} // Reverse order for parents* and prev-derivatives
if(rparentsprev.test(name)){matched.reverse();}}return this.pushStack(matched);};});var rnotwhite=/\S+/g; // String to Object options format cache
var optionsCache={}; // Convert String-formatted options into Object-formatted ones and store in cache
function createOptions(options){var object=optionsCache[options] = {};jQuery.each(options.match(rnotwhite) || [],function(_,flag){object[flag] = true;});return object;} /*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */jQuery.Callbacks = function(options){ // Convert options from String-formatted to Object-formatted if needed
// (we check in cache first)
options = stringTraceUseValue(stringTraceTripleEqual(typeof options === "undefined"?"undefined":stringTraceTypeOf(options),stringTrace("string")))?optionsCache[options] || createOptions(options):jQuery.extend({},options);var  // Last fire value (for non-forgettable lists)
memory, // Flag to know if list was already fired
fired, // Flag to know if list is currently firing
firing, // First callback to fire (used internally by add and fireWith)
firingStart, // End of the loop when firing
firingLength, // Index of currently firing callback (modified by remove if needed)
firingIndex, // Actual callback list
list=[], // Stack of fire calls for repeatable lists
stack=!options.once && [], // Fire callbacks
fire=function(data){memory = options.memory && data;fired = true;firingIndex = firingStart || 0;firingStart = 0;firingLength = list.length;firing = true;for(;list && firingIndex < firingLength;firingIndex++) {if(stringTraceTripleEqual(list[firingIndex].apply(data[0],data[1]),false) && options.stopOnFalse){memory = false; // To prevent further calls using add
break;}}firing = false;if(list){if(stack){if(stack.length){fire(stack.shift());}}else if(memory){list = [];}else {self.disable();}}}, // Actual Callbacks object
self={ // Add a callback or a collection of callbacks to the list
add:function(){if(list){ // First, we save the current length
var start=list.length;(function add(args){jQuery.each(args,function(_,arg){var type=jQuery.type(arg);if(stringTraceTripleEqual(type,stringTrace("function"))){if(!options.unique || !self.has(arg)){list.push(arg);}}else if(arg && arg.length && stringTraceNotTripleEqual(type,stringTrace("string"))){ // Inspect recursively
add(arg);}});})(arguments); // Do we need to add the callbacks to the
// current firing batch?
if(firing){firingLength = list.length; // With memory, if we're not firing then
// we should call right away
}else if(memory){firingStart = start;fire(memory);}}return this;}, // Remove a callback from the list
remove:function(){if(list){jQuery.each(arguments,function(_,arg){var index;while(stringTraceUseValue((index = jQuery.inArray(arg,list,index)) > -1)) {list.splice(index,1); // Handle firing indexes
if(firing){if(index <= firingLength){firingLength--;}if(index <= firingIndex){firingIndex--;}}}});}return this;}, // Check if a given callback is in the list.
// If no argument is given, return whether or not list has callbacks attached.
has:function(fn){return stringTraceUseValue(fn)?jQuery.inArray(fn,list) > -1:!!(list && list.length);}, // Remove all callbacks from the list
empty:function(){list = [];firingLength = 0;return this;}, // Have the list do nothing anymore
disable:function(){list = stack = memory = undefined;return this;}, // Is it disabled?
disabled:function(){return !list;}, // Lock the list in its current state
lock:function(){stack = undefined;if(!memory){self.disable();}return this;}, // Is it locked?
locked:function(){return !stack;}, // Call all callbacks with the given context and arguments
fireWith:function(context,args){if(list && (!fired || stack)){args = args || [];args = [context,stringTraceUseValue(args.slice)?args.slice():args];if(firing){stack.push(args);}else {fire(args);}}return this;}, // Call all the callbacks with the given arguments
fire:function(){self.fireWith(this,arguments);return this;}, // To know if the callbacks have already been called at least once
fired:function(){return !!fired;}};return self;};jQuery.extend({Deferred:function(func){var tuples=[ // action, add listener, listener list, final state
[stringTrace("resolve"),stringTrace("done"),jQuery.Callbacks(stringTrace("once memory")),stringTrace("resolved")],[stringTrace("reject"),stringTrace("fail"),jQuery.Callbacks(stringTrace("once memory")),stringTrace("rejected")],[stringTrace("notify"),stringTrace("progress"),jQuery.Callbacks(stringTrace("memory"))]],state=stringTrace("pending"),promise={state:function(){return state;},always:function(){deferred.done(arguments).fail(arguments);return this;},then:function() /* fnDone, fnFail, fnProgress */{var fns=arguments;return jQuery.Deferred(function(newDefer){jQuery.each(tuples,function(i,tuple){var fn=jQuery.isFunction(fns[i]) && fns[i]; // deferred[ done | fail | progress ] for forwarding actions to newDefer
deferred[tuple[1]](function(){var returned=fn && fn.apply(this,arguments);if(returned && jQuery.isFunction(returned.promise)){returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);}else {newDefer[stringTraceAdd(tuple[0],stringTrace("With"))](stringTraceUseValue(stringTraceTripleEqual(this,promise))?newDefer.promise():this,stringTraceUseValue(fn)?[returned]:arguments);}});});fns = null;}).promise();}, // Get a promise for this deferred
// If obj is provided, the promise aspect is added to the object
promise:function(obj){return stringTraceUseValue(obj != null)?jQuery.extend(obj,promise):promise;}},deferred={}; // Keep pipe for back-compat
promise.pipe = promise.then; // Add list-specific methods
jQuery.each(tuples,function(i,tuple){var list=tuple[2],stateString=tuple[3]; // promise[ done | fail | progress ] = list.add
promise[tuple[1]] = list.add; // Handle state
if(stateString){list.add(function(){ // state = [ resolved | rejected ]
state = stateString; // [ reject_list | resolve_list ].disable; progress_list.lock
},tuples[i ^ 1][2].disable,tuples[2][2].lock);} // deferred[ resolve | reject | notify ]
deferred[tuple[0]] = function(){deferred[stringTraceAdd(tuple[0],stringTrace("With"))](stringTraceUseValue(stringTraceTripleEqual(this,deferred))?promise:this,arguments);return this;};deferred[stringTraceAdd(tuple[0],stringTrace("With"))] = list.fireWith;}); // Make the deferred a promise
promise.promise(deferred); // Call given func if any
if(func){func.call(deferred,deferred);} // All done!
return deferred;}, // Deferred helper
when:function(subordinate /* , ..., subordinateN */){var i=0,resolveValues=slice.call(arguments),length=resolveValues.length, // the count of uncompleted subordinates
remaining=stringTraceUseValue(stringTraceNotTripleEqual(length,1) || subordinate && jQuery.isFunction(subordinate.promise))?length:0, // the master Deferred. If resolveValues consist of only a single Deferred, just use that.
deferred=stringTraceUseValue(stringTraceTripleEqual(remaining,1))?subordinate:jQuery.Deferred(), // Update function for both resolve and progress values
updateFunc=function(i,contexts,values){return function(value){contexts[i] = this;values[i] = stringTraceUseValue(arguments.length > 1)?slice.call(arguments):value;if(stringTraceTripleEqual(values,progressValues)){deferred.notifyWith(contexts,values);}else if(! --remaining){deferred.resolveWith(contexts,values);}};},progressValues,progressContexts,resolveContexts; // Add listeners to Deferred subordinates; treat others as resolved
if(length > 1){progressValues = new Array(length);progressContexts = new Array(length);resolveContexts = new Array(length);for(;i < length;i++) {if(resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)){resolveValues[i].promise().done(updateFunc(i,resolveContexts,resolveValues)).fail(deferred.reject).progress(updateFunc(i,progressContexts,progressValues));}else {--remaining;}}} // If we're not waiting on anything, resolve the master
if(!remaining){deferred.resolveWith(resolveContexts,resolveValues);}return deferred.promise();}}); // The deferred used on DOM ready
var readyList;jQuery.fn.ready = function(fn){ // Add the callback
jQuery.ready.promise().done(fn);return this;};jQuery.extend({ // Is the DOM ready to be used? Set to true once it occurs.
isReady:false, // A counter to track how many items to wait for before
// the ready event fires. See #6781
readyWait:1, // Hold (or release) the ready event
holdReady:function(hold){if(hold){jQuery.readyWait++;}else {jQuery.ready(true);}}, // Handle when the DOM is ready
ready:function(wait){ // Abort if there are pending holds or we're already ready
if(stringTraceUseValue(stringTraceTripleEqual(wait,true))?--jQuery.readyWait:jQuery.isReady){return;} // Remember that the DOM is ready
jQuery.isReady = true; // If a normal DOM Ready event fired, decrement, and wait if need be
if(stringTraceNotTripleEqual(wait,true) && --jQuery.readyWait > 0){return;} // If there are functions bound, to execute
readyList.resolveWith(document,[jQuery]); // Trigger any bound ready events
if(jQuery.fn.triggerHandler){jQuery(document).triggerHandler(stringTrace("ready"));jQuery(document).off(stringTrace("ready"));}}}); /**
 * The ready event handler and self cleanup method
 */function completed(){document.removeEventListener(stringTrace("DOMContentLoaded"),completed,false);window.removeEventListener(stringTrace("load"),completed,false);jQuery.ready();}jQuery.ready.promise = function(obj){if(!readyList){readyList = jQuery.Deferred(); // Catch cases where $(document).ready() is called after the browser event has already occurred.
// We once tried to use readyState "interactive" here, but it caused issues like the one
// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
if(stringTraceTripleEqual(document.readyState,stringTrace("complete"))){ // Handle it asynchronously to allow scripts the opportunity to delay ready
setTimeout(jQuery.ready);}else { // Use the handy event callback
document.addEventListener(stringTrace("DOMContentLoaded"),completed,false); // A fallback to window.onload, that will always work
window.addEventListener(stringTrace("load"),completed,false);}}return readyList.promise(obj);}; // Kick off the DOM ready check even if the user does not
jQuery.ready.promise(); // Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access=jQuery.access = function(elems,fn,key,value,chainable,emptyGet,raw){var i=0,len=elems.length,bulk=key == null; // Sets many values
if(stringTraceTripleEqual(jQuery.type(key),stringTrace("object"))){chainable = true;for(i in key) {jQuery.access(elems,fn,i,key[i],true,emptyGet,raw);} // Sets one value
}else if(stringTraceNotTripleEqual(value,undefined)){chainable = true;if(!jQuery.isFunction(value)){raw = true;}if(bulk){ // Bulk operations run against the entire set
if(raw){fn.call(elems,value);fn = null; // ...except when executing function values
}else {bulk = fn;fn = function(elem,key,value){return bulk.call(jQuery(elem),value);};}}if(fn){for(;i < len;i++) {fn(elems[i],key,stringTraceUseValue(raw)?value:value.call(elems[i],i,fn(elems[i],key)));}}}return stringTraceUseValue(chainable)?elems: // Gets
stringTraceUseValue(bulk)?fn.call(elems):stringTraceUseValue(len)?fn(elems[0],key):emptyGet;}; /**
 * Determines whether an object can have data
 */jQuery.acceptData = function(owner){ // Accepts only:
//  - Node
//    - Node.ELEMENT_NODE
//    - Node.DOCUMENT_NODE
//  - Object
//    - Any
/* jshint -W018 */return stringTraceTripleEqual(owner.nodeType,1) || stringTraceTripleEqual(owner.nodeType,9) || ! +owner.nodeType;};function Data(){ // Support: Android<4,
// Old WebKit does not have Object.preventExtensions/freeze method,
// return new empty object instead with no [[set]] accessor
Object.defineProperty(this.cache = {},0,{get:function(){return {};}});this.expando = stringTraceAdd(jQuery.expando,Data.uid++);}Data.uid = 1;Data.accepts = jQuery.acceptData;Data.prototype = {key:function(owner){ // We can accept data for non-element nodes in modern browsers,
// but we should not, see #8335.
// Always return the key for a frozen object.
if(!Data.accepts(owner)){return 0;}var descriptor={}, // Check if the owner object already has a cache key
unlock=owner[this.expando]; // If not, create one
if(!unlock){unlock = Data.uid++; // Secure it in a non-enumerable, non-writable property
try{descriptor[this.expando] = {value:unlock};Object.defineProperties(owner,descriptor); // Support: Android<4
// Fallback to a less secure definition
}catch(e) {descriptor[this.expando] = unlock;jQuery.extend(owner,descriptor);}} // Ensure the cache object
if(!this.cache[unlock]){this.cache[unlock] = {};}return unlock;},set:function(owner,data,value){var prop, // There may be an unlock assigned to this node,
// if there is no entry for this "owner", create one inline
// and set the unlock as though an owner entry had always existed
unlock=this.key(owner),cache=this.cache[unlock]; // Handle: [ owner, key, value ] args
if(stringTraceTripleEqual(typeof data === "undefined"?"undefined":stringTraceTypeOf(data),stringTrace("string"))){cache[data] = value; // Handle: [ owner, { properties } ] args
}else { // Fresh assignments by object are shallow copied
if(jQuery.isEmptyObject(cache)){jQuery.extend(this.cache[unlock],data); // Otherwise, copy the properties one-by-one to the cache object
}else {for(prop in data) {cache[prop] = data[prop];}}}return cache;},get:function(owner,key){ // Either a valid cache is found, or will be created.
// New caches will be created and the unlock returned,
// allowing direct access to the newly created
// empty data object. A valid owner object must be provided.
var cache=this.cache[this.key(owner)];return stringTraceUseValue(stringTraceTripleEqual(key,undefined))?cache:cache[key];},access:function(owner,key,value){var stored; // In cases where either:
//
//   1. No key was specified
//   2. A string key was specified, but no value provided
//
// Take the "read" path and allow the get method to determine
// which value to return, respectively either:
//
//   1. The entire cache object
//   2. The data stored at the key
//
if(stringTraceTripleEqual(key,undefined) || key && stringTraceTripleEqual(typeof key === "undefined"?"undefined":stringTraceTypeOf(key),stringTrace("string")) && stringTraceTripleEqual(value,undefined)){stored = this.get(owner,key);return stringTraceUseValue(stringTraceNotTripleEqual(stored,undefined))?stored:this.get(owner,jQuery.camelCase(key));} // [*]When the key is not a string, or both a key and value
// are specified, set or extend (existing objects) with either:
//
//   1. An object of properties
//   2. A key and value
//
this.set(owner,key,value); // Since the "set" path can have two possible entry points
// return the expected data based on which path was taken[*]
return stringTraceUseValue(stringTraceNotTripleEqual(value,undefined))?value:key;},remove:function(owner,key){var i,name,camel,unlock=this.key(owner),cache=this.cache[unlock];if(stringTraceTripleEqual(key,undefined)){this.cache[unlock] = {};}else { // Support array or space separated string of keys
if(jQuery.isArray(key)){ // If "name" is an array of keys...
// When data is initially created, via ("key", "val") signature,
// keys will be converted to camelCase.
// Since there is no way to tell _how_ a key was added, remove
// both plain key and camelCase key. #12786
// This will only penalize the array argument path.
name = key.concat(key.map(jQuery.camelCase));}else {camel = jQuery.camelCase(key); // Try the string as a key before any manipulation
if(key in cache){name = [key,camel];}else { // If a key with the spaces exists, use it.
// Otherwise, create an array by matching non-whitespace
name = camel;name = stringTraceUseValue(name in cache)?[name]:name.match(rnotwhite) || [];}}i = name.length;while(stringTraceUseValue(i--)) {delete cache[name[i]];}}},hasData:function(owner){return !jQuery.isEmptyObject(this.cache[owner[this.expando]] || {});},discard:function(owner){if(owner[this.expando]){delete this.cache[owner[this.expando]];}}};var data_priv=new Data();var data_user=new Data(); //	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014
var rbrace=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,rmultiDash=/([A-Z])/g;function dataAttr(elem,key,data){var name; // If nothing was found internally, try to fetch any
// data from the HTML5 data-* attribute
if(stringTraceTripleEqual(data,undefined) && stringTraceTripleEqual(elem.nodeType,1)){name = stringTraceAdd(stringTrace("data-"),key.replace(rmultiDash,stringTrace("-$1")).toLowerCase());data = elem.getAttribute(name);if(stringTraceTripleEqual(typeof data === "undefined"?"undefined":stringTraceTypeOf(data),stringTrace("string"))){try{data = stringTraceUseValue(stringTraceTripleEqual(data,stringTrace("true")))?true:stringTraceUseValue(stringTraceTripleEqual(data,stringTrace("false")))?false:stringTraceUseValue(stringTraceTripleEqual(data,stringTrace("null")))?null: // Only convert to a number if it doesn't change the string
stringTraceUseValue(stringTraceTripleEqual(stringTraceAdd(+data,stringTrace("")),data))?+data:stringTraceUseValue(rbrace.test(data))?jQuery.parseJSON(data):data;}catch(e) {} // Make sure we set the data so it isn't changed later
data_user.set(elem,key,data);}else {data = undefined;}}return data;}jQuery.extend({hasData:function(elem){return data_user.hasData(elem) || data_priv.hasData(elem);},data:function(elem,name,data){return data_user.access(elem,name,data);},removeData:function(elem,name){data_user.remove(elem,name);}, // TODO: Now that all calls to _data and _removeData have been replaced
// with direct calls to data_priv methods, these can be deprecated.
_data:function(elem,name,data){return data_priv.access(elem,name,data);},_removeData:function(elem,name){data_priv.remove(elem,name);}});jQuery.fn.extend({data:function(key,value){var i,name,data,elem=this[0],attrs=elem && elem.attributes; // Gets all values
if(stringTraceTripleEqual(key,undefined)){if(this.length){data = data_user.get(elem);if(stringTraceTripleEqual(elem.nodeType,1) && !data_priv.get(elem,stringTrace("hasDataAttrs"))){i = attrs.length;while(stringTraceUseValue(i--)) { // Support: IE11+
// The attrs elements can be null (#14894)
if(attrs[i]){name = attrs[i].name;if(stringTraceTripleEqual(name.indexOf(stringTrace("data-")),0)){name = jQuery.camelCase(name.slice(5));dataAttr(elem,name,data[name]);}}}data_priv.set(elem,stringTrace("hasDataAttrs"),true);}}return data;} // Sets multiple values
if(stringTraceTripleEqual(typeof key === "undefined"?"undefined":stringTraceTypeOf(key),stringTrace("object"))){return this.each(function(){data_user.set(this,key);});}return access(this,function(value){var data,camelKey=jQuery.camelCase(key); // The calling jQuery object (element matches) is not empty
// (and therefore has an element appears at this[ 0 ]) and the
// `value` parameter was not undefined. An empty jQuery object
// will result in `undefined` for elem = this[ 0 ] which will
// throw an exception if an attempt to read a data cache is made.
if(elem && stringTraceTripleEqual(value,undefined)){ // Attempt to get data from the cache
// with the key as-is
data = data_user.get(elem,key);if(stringTraceNotTripleEqual(data,undefined)){return data;} // Attempt to get data from the cache
// with the key camelized
data = data_user.get(elem,camelKey);if(stringTraceNotTripleEqual(data,undefined)){return data;} // Attempt to "discover" the data in
// HTML5 custom data-* attrs
data = dataAttr(elem,camelKey,undefined);if(stringTraceNotTripleEqual(data,undefined)){return data;} // We tried really hard, but the data doesn't exist.
return;} // Set the data...
this.each(function(){ // First, attempt to store a copy or reference of any
// data that might've been store with a camelCased key.
var data=data_user.get(this,camelKey); // For HTML5 data-* attribute interop, we have to
// store property names with dashes in a camelCase form.
// This might not apply to all properties...*
data_user.set(this,camelKey,value); // *... In the case of properties that might _actually_
// have dashes, we need to also store a copy of that
// unchanged property.
if(stringTraceNotTripleEqual(key.indexOf(stringTrace("-")),-1) && stringTraceNotTripleEqual(data,undefined)){data_user.set(this,key,value);}});},null,value,arguments.length > 1,null,true);},removeData:function(key){return this.each(function(){data_user.remove(this,key);});}});jQuery.extend({queue:function(elem,type,data){var queue;if(elem){type = stringTraceAdd(type || stringTrace("fx"),stringTrace("queue"));queue = data_priv.get(elem,type); // Speed up dequeue by getting out quickly if this is just a lookup
if(data){if(!queue || jQuery.isArray(data)){queue = data_priv.access(elem,type,jQuery.makeArray(data));}else {queue.push(data);}}return queue || [];}},dequeue:function(elem,type){type = type || stringTrace("fx");var queue=jQuery.queue(elem,type),startLength=queue.length,fn=queue.shift(),hooks=jQuery._queueHooks(elem,type),next=function(){jQuery.dequeue(elem,type);}; // If the fx queue is dequeued, always remove the progress sentinel
if(stringTraceTripleEqual(fn,stringTrace("inprogress"))){fn = queue.shift();startLength--;}if(fn){ // Add a progress sentinel to prevent the fx queue from being
// automatically dequeued
if(stringTraceTripleEqual(type,stringTrace("fx"))){queue.unshift(stringTrace("inprogress"));} // Clear up the last queue stop function
delete hooks.stop;fn.call(elem,next,hooks);}if(!startLength && hooks){hooks.empty.fire();}}, // Not public - generate a queueHooks object, or return the current one
_queueHooks:function(elem,type){var key=stringTraceAdd(type,stringTrace("queueHooks"));return data_priv.get(elem,key) || data_priv.access(elem,key,{empty:jQuery.Callbacks(stringTrace("once memory")).add(function(){data_priv.remove(elem,[stringTraceAdd(type,stringTrace("queue")),key]);})});}});jQuery.fn.extend({queue:function(type,data){var setter=2;if(stringTraceNotTripleEqual(typeof type === "undefined"?"undefined":stringTraceTypeOf(type),stringTrace("string"))){data = type;type = stringTrace("fx");setter--;}if(arguments.length < setter){return jQuery.queue(this[0],type);}return stringTraceUseValue(stringTraceTripleEqual(data,undefined))?this:this.each(function(){var queue=jQuery.queue(this,type,data); // Ensure a hooks for this queue
jQuery._queueHooks(this,type);if(stringTraceTripleEqual(type,stringTrace("fx")) && stringTraceNotTripleEqual(queue[0],stringTrace("inprogress"))){jQuery.dequeue(this,type);}});},dequeue:function(type){return this.each(function(){jQuery.dequeue(this,type);});},clearQueue:function(type){return this.queue(type || stringTrace("fx"),[]);}, // Get a promise resolved when queues of a certain type
// are emptied (fx is the type by default)
promise:function(type,obj){var tmp,count=1,defer=jQuery.Deferred(),elements=this,i=this.length,resolve=function(){if(! --count){defer.resolveWith(elements,[elements]);}};if(stringTraceNotTripleEqual(typeof type === "undefined"?"undefined":stringTraceTypeOf(type),stringTrace("string"))){obj = type;type = undefined;}type = type || stringTrace("fx");while(stringTraceUseValue(i--)) {tmp = data_priv.get(elements[i],stringTraceAdd(type,stringTrace("queueHooks")));if(tmp && tmp.empty){count++;tmp.empty.add(resolve);}}resolve();return defer.promise(obj);}});var pnum=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;var cssExpand=[stringTrace("Top"),stringTrace("Right"),stringTrace("Bottom"),stringTrace("Left")];var isHidden=function(elem,el){ // isHidden might be called from jQuery#filter function;
// in that case, element will be second argument
elem = el || elem;return stringTraceTripleEqual(jQuery.css(elem,stringTrace("display")),stringTrace("none")) || !jQuery.contains(elem.ownerDocument,elem);};var rcheckableType=/^(?:checkbox|radio)$/i;(function(){var fragment=document.createDocumentFragment(),div=fragment.appendChild(document.createElement(stringTrace("div"))),input=document.createElement(stringTrace("input")); // Support: Safari<=5.1
// Check state lost if the name is set (#11217)
// Support: Windows Web Apps (WWA)
// `name` and `type` must use .setAttribute for WWA (#14901)
input.setAttribute(stringTrace("type"),stringTrace("radio"));input.setAttribute(stringTrace("checked"),stringTrace("checked"));input.setAttribute(stringTrace("name"),stringTrace("t"));div.appendChild(input); // Support: Safari<=5.1, Android<4.2
// Older WebKit doesn't clone checked state correctly in fragments
support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked; // Support: IE<=11+
// Make sure textarea (and checkbox) defaultValue is properly cloned
stringTraceSetInnerHTML(div,stringTrace("<textarea>x</textarea>"));support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;})();var strundefined=typeof undefined === "undefined"?"undefined":stringTraceTypeOf(undefined);support.focusinBubbles = stringTrace("onfocusin") in window;var rkeyEvent=/^key/,rmouseEvent=/^(?:mouse|pointer|contextmenu)|click/,rfocusMorph=/^(?:focusinfocus|focusoutblur)$/,rtypenamespace=/^([^.]*)(?:\.(.+)|)$/;function returnTrue(){return true;}function returnFalse(){return false;}function safeActiveElement(){try{return document.activeElement;}catch(err) {}} /*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */jQuery.event = {global:{},add:function(elem,types,handler,data,selector){var handleObjIn,eventHandle,tmp,events,t,handleObj,special,handlers,type,namespaces,origType,elemData=data_priv.get(elem); // Don't attach events to noData or text/comment nodes (but allow plain objects)
if(!elemData){return;} // Caller can pass in an object of custom data in lieu of the handler
if(handler.handler){handleObjIn = handler;handler = handleObjIn.handler;selector = handleObjIn.selector;} // Make sure that the handler has a unique ID, used to find/remove it later
if(!handler.guid){handler.guid = jQuery.guid++;} // Init the element's event structure and main handler, if this is the first
if(!(events = elemData.events)){events = elemData.events = {};}if(!(eventHandle = elemData.handle)){eventHandle = elemData.handle = function(e){ // Discard the second event of a jQuery.event.trigger() and
// when an event is called after a page has unloaded
return stringTraceUseValue(stringTraceNotTripleEqual(typeof jQuery === "undefined"?"undefined":stringTraceTypeOf(jQuery),strundefined) && stringTraceNotTripleEqual(jQuery.event.triggered,e.type))?jQuery.event.dispatch.apply(elem,arguments):undefined;};} // Handle multiple events separated by a space
types = (types || stringTrace("")).match(rnotwhite) || [stringTrace("")];t = types.length;while(stringTraceUseValue(t--)) {tmp = rtypenamespace.exec(types[t]) || [];type = origType = tmp[1];namespaces = (tmp[2] || stringTrace("")).split(stringTrace(".")).sort(); // There *must* be a type, no attaching namespace-only handlers
if(!type){continue;} // If event changes its type, use the special event handlers for the changed type
special = jQuery.event.special[type] || {}; // If selector defined, determine special event api type, otherwise given type
type = (stringTraceUseValue(selector)?special.delegateType:special.bindType) || type; // Update special based on newly reset type
special = jQuery.event.special[type] || {}; // handleObj is passed to all event handlers
handleObj = jQuery.extend({type:type,origType:origType,data:data,handler:handler,guid:handler.guid,selector:selector,needsContext:selector && jQuery.expr.match.needsContext.test(selector),namespace:namespaces.join(stringTrace("."))},handleObjIn); // Init the event handler queue if we're the first
if(!(handlers = events[type])){handlers = events[type] = [];handlers.delegateCount = 0; // Only use addEventListener if the special events handler returns false
if(!special.setup || stringTraceTripleEqual(special.setup.call(elem,data,namespaces,eventHandle),false)){if(elem.addEventListener){elem.addEventListener(type,eventHandle,false);}}}if(special.add){special.add.call(elem,handleObj);if(!handleObj.handler.guid){handleObj.handler.guid = handler.guid;}} // Add to the element's handler list, delegates in front
if(selector){handlers.splice(handlers.delegateCount++,0,handleObj);}else {handlers.push(handleObj);} // Keep track of which events have ever been used, for event optimization
jQuery.event.global[type] = true;}}, // Detach an event or set of events from an element
remove:function(elem,types,handler,selector,mappedTypes){var j,origCount,tmp,events,t,handleObj,special,handlers,type,namespaces,origType,elemData=data_priv.hasData(elem) && data_priv.get(elem);if(!elemData || !(events = elemData.events)){return;} // Once for each type.namespace in types; type may be omitted
types = (types || stringTrace("")).match(rnotwhite) || [stringTrace("")];t = types.length;while(stringTraceUseValue(t--)) {tmp = rtypenamespace.exec(types[t]) || [];type = origType = tmp[1];namespaces = (tmp[2] || stringTrace("")).split(stringTrace(".")).sort(); // Unbind all events (on this namespace, if provided) for the element
if(!type){for(type in events) {jQuery.event.remove(elem,stringTraceAdd(type,types[t]),handler,selector,true);}continue;}special = jQuery.event.special[type] || {};type = (stringTraceUseValue(selector)?special.delegateType:special.bindType) || type;handlers = events[type] || [];tmp = tmp[2] && new RegExp(stringTraceAdd(stringTraceAdd(stringTrace("(^|\\.)"),namespaces.join(stringTrace("\\.(?:.*\\.|)"))),stringTrace("(\\.|$)"))); // Remove matching events
origCount = j = handlers.length;while(stringTraceUseValue(j--)) {handleObj = handlers[j];if((mappedTypes || stringTraceTripleEqual(origType,handleObj.origType)) && (!handler || stringTraceTripleEqual(handler.guid,handleObj.guid)) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || stringTraceTripleEqual(selector,handleObj.selector) || stringTraceTripleEqual(selector,stringTrace("**")) && handleObj.selector)){handlers.splice(j,1);if(handleObj.selector){handlers.delegateCount--;}if(special.remove){special.remove.call(elem,handleObj);}}} // Remove generic event handler if we removed something and no more handlers exist
// (avoids potential for endless recursion during removal of special event handlers)
if(origCount && !handlers.length){if(!special.teardown || stringTraceTripleEqual(special.teardown.call(elem,namespaces,elemData.handle),false)){jQuery.removeEvent(elem,type,elemData.handle);}delete events[type];}} // Remove the expando if it's no longer used
if(jQuery.isEmptyObject(events)){delete elemData.handle;data_priv.remove(elem,stringTrace("events"));}},trigger:function(event,data,elem,onlyHandlers){var i,cur,tmp,bubbleType,ontype,handle,special,eventPath=[elem || document],type=stringTraceUseValue(hasOwn.call(event,stringTrace("type")))?event.type:event,namespaces=stringTraceUseValue(hasOwn.call(event,stringTrace("namespace")))?event.namespace.split(stringTrace(".")):[];cur = tmp = elem = elem || document; // Don't do events on text and comment nodes
if(stringTraceTripleEqual(elem.nodeType,3) || stringTraceTripleEqual(elem.nodeType,8)){return;} // focus/blur morphs to focusin/out; ensure we're not firing them right now
if(rfocusMorph.test(stringTraceAdd(type,jQuery.event.triggered))){return;}if(type.indexOf(stringTrace(".")) >= 0){ // Namespaced trigger; create a regexp to match event type in handle()
namespaces = type.split(stringTrace("."));type = namespaces.shift();namespaces.sort();}ontype = type.indexOf(stringTrace(":")) < 0 && stringTraceAdd(stringTrace("on"),type); // Caller can pass in a jQuery.Event object, Object, or just an event type string
event = stringTraceUseValue(event[jQuery.expando])?event:new jQuery.Event(type,stringTraceTripleEqual(typeof event === "undefined"?"undefined":stringTraceTypeOf(event),stringTrace("object")) && event); // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
event.isTrigger = stringTraceUseValue(onlyHandlers)?2:3;event.namespace = namespaces.join(stringTrace("."));event.namespace_re = stringTraceUseValue(event.namespace)?new RegExp(stringTraceAdd(stringTraceAdd(stringTrace("(^|\\.)"),namespaces.join(stringTrace("\\.(?:.*\\.|)"))),stringTrace("(\\.|$)"))):null; // Clean up the event in case it is being reused
event.result = undefined;if(!event.target){event.target = elem;} // Clone any incoming data and prepend the event, creating the handler arg list
data = stringTraceUseValue(data == null)?[event]:jQuery.makeArray(data,[event]); // Allow special events to draw outside the lines
special = jQuery.event.special[type] || {};if(!onlyHandlers && special.trigger && stringTraceTripleEqual(special.trigger.apply(elem,data),false)){return;} // Determine event propagation path in advance, per W3C events spec (#9951)
// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
if(!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)){bubbleType = special.delegateType || type;if(!rfocusMorph.test(stringTraceAdd(bubbleType,type))){cur = cur.parentNode;}for(;cur;cur = cur.parentNode) {eventPath.push(cur);tmp = cur;} // Only add window if we got to document (e.g., not plain obj or detached DOM)
if(stringTraceTripleEqual(tmp,elem.ownerDocument || document)){eventPath.push(tmp.defaultView || tmp.parentWindow || window);}} // Fire handlers on the event path
i = 0;while(stringTraceUseValue((cur = eventPath[i++]) && !event.isPropagationStopped())) {event.type = stringTraceUseValue(i > 1)?bubbleType:special.bindType || type; // jQuery handler
handle = (data_priv.get(cur,stringTrace("events")) || {})[event.type] && data_priv.get(cur,stringTrace("handle"));if(handle){handle.apply(cur,data);} // Native handler
handle = ontype && cur[ontype];if(handle && handle.apply && jQuery.acceptData(cur)){event.result = handle.apply(cur,data);if(stringTraceTripleEqual(event.result,false)){event.preventDefault();}}}event.type = type; // If nobody prevented the default action, do it now
if(!onlyHandlers && !event.isDefaultPrevented()){if((!special._default || stringTraceTripleEqual(special._default.apply(eventPath.pop(),data),false)) && jQuery.acceptData(elem)){ // Call a native DOM method on the target with the same name name as the event.
// Don't do default actions on window, that's where global variables be (#6170)
if(ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)){ // Don't re-trigger an onFOO event when we call its FOO() method
tmp = elem[ontype];if(tmp){elem[ontype] = null;} // Prevent re-triggering of the same event, since we already bubbled it above
jQuery.event.triggered = type;elem[type]();jQuery.event.triggered = undefined;if(tmp){elem[ontype] = tmp;}}}}return event.result;},dispatch:function(event){ // Make a writable jQuery.Event from the native event object
event = jQuery.event.fix(event);var i,j,ret,matched,handleObj,handlerQueue=[],args=slice.call(arguments),handlers=(data_priv.get(this,stringTrace("events")) || {})[event.type] || [],special=jQuery.event.special[event.type] || {}; // Use the fix-ed jQuery.Event rather than the (read-only) native event
args[0] = event;event.delegateTarget = this; // Call the preDispatch hook for the mapped type, and let it bail if desired
if(special.preDispatch && stringTraceTripleEqual(special.preDispatch.call(this,event),false)){return;} // Determine handlers
handlerQueue = jQuery.event.handlers.call(this,event,handlers); // Run delegates first; they may want to stop propagation beneath us
i = 0;while(stringTraceUseValue((matched = handlerQueue[i++]) && !event.isPropagationStopped())) {event.currentTarget = matched.elem;j = 0;while(stringTraceUseValue((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped())) { // Triggered event must either 1) have no namespace, or 2) have namespace(s)
// a subset or equal to those in the bound event (both can have no namespace).
if(!event.namespace_re || event.namespace_re.test(handleObj.namespace)){event.handleObj = handleObj;event.data = handleObj.data;ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem,args);if(stringTraceNotTripleEqual(ret,undefined)){if(stringTraceTripleEqual(event.result = ret,false)){event.preventDefault();event.stopPropagation();}}}}} // Call the postDispatch hook for the mapped type
if(special.postDispatch){special.postDispatch.call(this,event);}return event.result;},handlers:function(event,handlers){var i,matches,sel,handleObj,handlerQueue=[],delegateCount=handlers.delegateCount,cur=event.target; // Find delegate handlers
// Black-hole SVG <use> instance trees (#13180)
// Avoid non-left-click bubbling in Firefox (#3861)
if(delegateCount && cur.nodeType && (!event.button || stringTraceNotTripleEqual(event.type,stringTrace("click")))){for(;stringTraceNotTripleEqual(cur,this);cur = cur.parentNode || this) { // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
if(stringTraceNotTripleEqual(cur.disabled,true) || stringTraceNotTripleEqual(event.type,stringTrace("click"))){matches = [];for(i = 0;i < delegateCount;i++) {handleObj = handlers[i]; // Don't conflict with Object.prototype properties (#13203)
sel = stringTraceAdd(handleObj.selector,stringTrace(" "));if(stringTraceTripleEqual(matches[sel],undefined)){matches[sel] = stringTraceUseValue(handleObj.needsContext)?jQuery(sel,this).index(cur) >= 0:jQuery.find(sel,this,null,[cur]).length;}if(matches[sel]){matches.push(handleObj);}}if(matches.length){handlerQueue.push({elem:cur,handlers:matches});}}}} // Add the remaining (directly-bound) handlers
if(delegateCount < handlers.length){handlerQueue.push({elem:this,handlers:handlers.slice(delegateCount)});}return handlerQueue;}, // Includes some event props shared by KeyEvent and MouseEvent
props:stringTrace("altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which").split(stringTrace(" ")),fixHooks:{},keyHooks:{props:stringTrace("char charCode key keyCode").split(stringTrace(" ")),filter:function(event,original){ // Add which for key events
if(event.which == null){event.which = stringTraceUseValue(original.charCode != null)?original.charCode:original.keyCode;}return event;}},mouseHooks:{props:stringTrace("button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement").split(stringTrace(" ")),filter:function(event,original){var eventDoc,doc,body,button=original.button; // Calculate pageX/Y if missing and clientX/Y available
if(event.pageX == null && original.clientX != null){eventDoc = event.target.ownerDocument || document;doc = eventDoc.documentElement;body = eventDoc.body;event.pageX = stringTraceAdd(original.clientX,doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);event.pageY = stringTraceAdd(original.clientY,doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);} // Add which for click: 1 === left; 2 === middle; 3 === right
// Note: button is not normalized, so don't use it
if(!event.which && stringTraceNotTripleEqual(button,undefined)){event.which = stringTraceUseValue(button & 1)?1:stringTraceUseValue(button & 2)?3:stringTraceUseValue(button & 4)?2:0;}return event;}},fix:function(event){if(event[jQuery.expando]){return event;} // Create a writable copy of the event object and normalize some properties
var i,prop,copy,type=event.type,originalEvent=event,fixHook=this.fixHooks[type];if(!fixHook){this.fixHooks[type] = fixHook = stringTraceUseValue(rmouseEvent.test(type))?this.mouseHooks:stringTraceUseValue(rkeyEvent.test(type))?this.keyHooks:{};}copy = stringTraceUseValue(fixHook.props)?this.props.concat(fixHook.props):this.props;event = new jQuery.Event(originalEvent);i = copy.length;while(stringTraceUseValue(i--)) {prop = copy[i];event[prop] = originalEvent[prop];} // Support: Cordova 2.5 (WebKit) (#13255)
// All events should have a target; Cordova deviceready doesn't
if(!event.target){event.target = document;} // Support: Safari 6.0+, Chrome<28
// Target should not be a text node (#504, #13143)
if(stringTraceTripleEqual(event.target.nodeType,3)){event.target = event.target.parentNode;}return stringTraceUseValue(fixHook.filter)?fixHook.filter(event,originalEvent):event;},special:{load:{ // Prevent triggered image.load events from bubbling to window.load
noBubble:true},focus:{ // Fire native event if possible so blur/focus sequence is correct
trigger:function(){if(stringTraceNotTripleEqual(this,safeActiveElement()) && this.focus){this.focus();return false;}},delegateType:stringTrace("focusin")},blur:{trigger:function(){if(stringTraceTripleEqual(this,safeActiveElement()) && this.blur){this.blur();return false;}},delegateType:stringTrace("focusout")},click:{ // For checkbox, fire native event so checked state will be right
trigger:function(){if(stringTraceTripleEqual(this.type,stringTrace("checkbox")) && this.click && jQuery.nodeName(this,stringTrace("input"))){this.click();return false;}}, // For cross-browser consistency, don't fire native .click() on links
_default:function(event){return jQuery.nodeName(event.target,stringTrace("a"));}},beforeunload:{postDispatch:function(event){ // Support: Firefox 20+
// Firefox doesn't alert if the returnValue field is not set.
if(stringTraceNotTripleEqual(event.result,undefined) && event.originalEvent){event.originalEvent.returnValue = event.result;}}}},simulate:function(type,elem,event,bubble){ // Piggyback on a donor event to simulate a different one.
// Fake originalEvent to avoid donor's stopPropagation, but if the
// simulated event prevents default then we do the same on the donor.
var e=jQuery.extend(new jQuery.Event(),event,{type:type,isSimulated:true,originalEvent:{}});if(bubble){jQuery.event.trigger(e,null,elem);}else {jQuery.event.dispatch.call(elem,e);}if(e.isDefaultPrevented()){event.preventDefault();}}};jQuery.removeEvent = function(elem,type,handle){if(elem.removeEventListener){elem.removeEventListener(type,handle,false);}};jQuery.Event = function(src,props){ // Allow instantiation without the 'new' keyword
if(!(this instanceof jQuery.Event)){return new jQuery.Event(src,props);} // Event object
if(src && src.type){this.originalEvent = src;this.type = src.type; // Events bubbling up the document may have been marked as prevented
// by a handler lower down the tree; reflect the correct value.
this.isDefaultPrevented = stringTraceUseValue(src.defaultPrevented || stringTraceTripleEqual(src.defaultPrevented,undefined) &&  // Support: Android<4.0
stringTraceTripleEqual(src.returnValue,false))?returnTrue:returnFalse; // Event type
}else {this.type = src;} // Put explicitly provided properties onto the event object
if(props){jQuery.extend(this,props);} // Create a timestamp if incoming event doesn't have one
this.timeStamp = src && src.timeStamp || jQuery.now(); // Mark it as fixed
this[jQuery.expando] = true;}; // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {isDefaultPrevented:returnFalse,isPropagationStopped:returnFalse,isImmediatePropagationStopped:returnFalse,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented = returnTrue;if(e && e.preventDefault){e.preventDefault();}},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped = returnTrue;if(e && e.stopPropagation){e.stopPropagation();}},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped = returnTrue;if(e && e.stopImmediatePropagation){e.stopImmediatePropagation();}this.stopPropagation();}}; // Create mouseenter/leave events using mouseover/out and event-time checks
// Support: Chrome 15+
jQuery.each({mouseenter:stringTrace("mouseover"),mouseleave:stringTrace("mouseout"),pointerenter:stringTrace("pointerover"),pointerleave:stringTrace("pointerout")},function(orig,fix){jQuery.event.special[orig] = {delegateType:fix,bindType:fix,handle:function(event){var ret,target=this,related=event.relatedTarget,handleObj=event.handleObj; // For mousenter/leave call the handler if related is outside the target.
// NB: No relatedTarget if the mouse left/entered the browser window
if(!related || stringTraceNotTripleEqual(related,target) && !jQuery.contains(target,related)){event.type = handleObj.origType;ret = handleObj.handler.apply(this,arguments);event.type = fix;}return ret;}};}); // Support: Firefox, Chrome, Safari
// Create "bubbling" focus and blur events
if(!support.focusinBubbles){jQuery.each({focus:stringTrace("focusin"),blur:stringTrace("focusout")},function(orig,fix){ // Attach a single capturing handler on the document while someone wants focusin/focusout
var handler=function(event){jQuery.event.simulate(fix,event.target,jQuery.event.fix(event),true);};jQuery.event.special[fix] = {setup:function(){var doc=this.ownerDocument || this,attaches=data_priv.access(doc,fix);if(!attaches){doc.addEventListener(orig,handler,true);}data_priv.access(doc,fix,stringTraceAdd(attaches || 0,1));},teardown:function(){var doc=this.ownerDocument || this,attaches=data_priv.access(doc,fix) - 1;if(!attaches){doc.removeEventListener(orig,handler,true);data_priv.remove(doc,fix);}else {data_priv.access(doc,fix,attaches);}}};});}jQuery.fn.extend({on:function(types,selector,data,fn, /*INTERNAL*/one){var origFn,type; // Types can be a map of types/handlers
if(stringTraceTripleEqual(typeof types === "undefined"?"undefined":stringTraceTypeOf(types),stringTrace("object"))){ // ( types-Object, selector, data )
if(stringTraceNotTripleEqual(typeof selector === "undefined"?"undefined":stringTraceTypeOf(selector),stringTrace("string"))){ // ( types-Object, data )
data = data || selector;selector = undefined;}for(type in types) {this.on(type,selector,data,types[type],one);}return this;}if(data == null && fn == null){ // ( types, fn )
fn = selector;data = selector = undefined;}else if(fn == null){if(stringTraceTripleEqual(typeof selector === "undefined"?"undefined":stringTraceTypeOf(selector),stringTrace("string"))){ // ( types, selector, fn )
fn = data;data = undefined;}else { // ( types, data, fn )
fn = data;data = selector;selector = undefined;}}if(stringTraceTripleEqual(fn,false)){fn = returnFalse;}else if(!fn){return this;}if(stringTraceTripleEqual(one,1)){origFn = fn;fn = function(event){ // Can use an empty set, since event contains the info
jQuery().off(event);return origFn.apply(this,arguments);}; // Use same guid so caller can remove using origFn
fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);}return this.each(function(){jQuery.event.add(this,types,fn,data,selector);});},one:function(types,selector,data,fn){return this.on(types,selector,data,fn,1);},off:function(types,selector,fn){var handleObj,type;if(types && types.preventDefault && types.handleObj){ // ( event )  dispatched jQuery.Event
handleObj = types.handleObj;jQuery(types.delegateTarget).off(stringTraceUseValue(handleObj.namespace)?stringTraceAdd(stringTraceAdd(handleObj.origType,stringTrace(".")),handleObj.namespace):handleObj.origType,handleObj.selector,handleObj.handler);return this;}if(stringTraceTripleEqual(typeof types === "undefined"?"undefined":stringTraceTypeOf(types),stringTrace("object"))){ // ( types-object [, selector] )
for(type in types) {this.off(type,selector,types[type]);}return this;}if(stringTraceTripleEqual(selector,false) || stringTraceTripleEqual(typeof selector === "undefined"?"undefined":stringTraceTypeOf(selector),stringTrace("function"))){ // ( types [, fn] )
fn = selector;selector = undefined;}if(stringTraceTripleEqual(fn,false)){fn = returnFalse;}return this.each(function(){jQuery.event.remove(this,types,fn,selector);});},trigger:function(type,data){return this.each(function(){jQuery.event.trigger(type,data,this);});},triggerHandler:function(type,data){var elem=this[0];if(elem){return jQuery.event.trigger(type,data,elem,true);}}});var rxhtmlTag=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,rtagName=/<([\w:]+)/,rhtml=/<|&#?\w+;/,rnoInnerhtml=/<(?:script|style|link)/i, // checked="checked" or checked
rchecked=/checked\s*(?:[^=]|=\s*.checked.)/i,rscriptType=/^$|\/(?:java|ecma)script/i,rscriptTypeMasked=/^true\/(.*)/,rcleanScript=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g, // We have to close these tags to support XHTML (#13200)
wrapMap={ // Support: IE9
option:[1,stringTrace("<select multiple='multiple'>"),stringTrace("</select>")],thead:[1,stringTrace("<table>"),stringTrace("</table>")],col:[2,stringTrace("<table><colgroup>"),stringTrace("</colgroup></table>")],tr:[2,stringTrace("<table><tbody>"),stringTrace("</tbody></table>")],td:[3,stringTrace("<table><tbody><tr>"),stringTrace("</tr></tbody></table>")],_default:[0,stringTrace(""),stringTrace("")]}; // Support: IE9
wrapMap.optgroup = wrapMap.option;wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;wrapMap.th = wrapMap.td; // Support: 1.x compatibility
// Manipulating tables requires a tbody
function manipulationTarget(elem,content){return stringTraceUseValue(jQuery.nodeName(elem,stringTrace("table")) && jQuery.nodeName(stringTraceUseValue(stringTraceNotTripleEqual(content.nodeType,11))?content:content.firstChild,stringTrace("tr")))?elem.getElementsByTagName(stringTrace("tbody"))[0] || elem.appendChild(elem.ownerDocument.createElement(stringTrace("tbody"))):elem;} // Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript(elem){elem.type = stringTraceAdd(stringTraceAdd(stringTraceNotTripleEqual(elem.getAttribute(stringTrace("type")),null),stringTrace("/")),elem.type);return elem;}function restoreScript(elem){var match=rscriptTypeMasked.exec(elem.type);if(match){elem.type = match[1];}else {elem.removeAttribute(stringTrace("type"));}return elem;} // Mark scripts as having already been evaluated
function setGlobalEval(elems,refElements){var i=0,l=elems.length;for(;i < l;i++) {data_priv.set(elems[i],stringTrace("globalEval"),!refElements || data_priv.get(refElements[i],stringTrace("globalEval")));}}function cloneCopyEvent(src,dest){var i,l,type,pdataOld,pdataCur,udataOld,udataCur,events;if(stringTraceNotTripleEqual(dest.nodeType,1)){return;} // 1. Copy private data: events, handlers, etc.
if(data_priv.hasData(src)){pdataOld = data_priv.access(src);pdataCur = data_priv.set(dest,pdataOld);events = pdataOld.events;if(events){delete pdataCur.handle;pdataCur.events = {};for(type in events) {for(i = 0,l = events[type].length;i < l;i++) {jQuery.event.add(dest,type,events[type][i]);}}}} // 2. Copy user data
if(data_user.hasData(src)){udataOld = data_user.access(src);udataCur = jQuery.extend({},udataOld);data_user.set(dest,udataCur);}}function getAll(context,tag){var ret=stringTraceUseValue(context.getElementsByTagName)?context.getElementsByTagName(tag || stringTrace("*")):stringTraceUseValue(context.querySelectorAll)?context.querySelectorAll(tag || stringTrace("*")):[];return stringTraceUseValue(stringTraceTripleEqual(tag,undefined) || tag && jQuery.nodeName(context,tag))?jQuery.merge([context],ret):ret;} // Fix IE bugs, see support tests
function fixInput(src,dest){var nodeName=dest.nodeName.toLowerCase(); // Fails to persist the checked state of a cloned checkbox or radio button.
if(stringTraceTripleEqual(nodeName,stringTrace("input")) && rcheckableType.test(src.type)){dest.checked = src.checked; // Fails to return the selected option to the default selected state when cloning options
}else if(stringTraceTripleEqual(nodeName,stringTrace("input")) || stringTraceTripleEqual(nodeName,stringTrace("textarea"))){dest.defaultValue = src.defaultValue;}}jQuery.extend({clone:function(elem,dataAndEvents,deepDataAndEvents){var i,l,srcElements,destElements,clone=elem.cloneNode(true),inPage=jQuery.contains(elem.ownerDocument,elem); // Fix IE cloning issues
if(!support.noCloneChecked && (stringTraceTripleEqual(elem.nodeType,1) || stringTraceTripleEqual(elem.nodeType,11)) && !jQuery.isXMLDoc(elem)){ // We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
destElements = getAll(clone);srcElements = getAll(elem);for(i = 0,l = srcElements.length;i < l;i++) {fixInput(srcElements[i],destElements[i]);}} // Copy the events from the original to the clone
if(dataAndEvents){if(deepDataAndEvents){srcElements = srcElements || getAll(elem);destElements = destElements || getAll(clone);for(i = 0,l = srcElements.length;i < l;i++) {cloneCopyEvent(srcElements[i],destElements[i]);}}else {cloneCopyEvent(elem,clone);}} // Preserve script evaluation history
destElements = getAll(clone,stringTrace("script"));if(destElements.length > 0){setGlobalEval(destElements,!inPage && getAll(elem,stringTrace("script")));} // Return the cloned set
return clone;},buildFragment:function(elems,context,scripts,selection){var elem,tmp,tag,wrap,contains,j,fragment=context.createDocumentFragment(),nodes=[],i=0,l=elems.length;for(;i < l;i++) {elem = elems[i];if(elem || stringTraceTripleEqual(elem,0)){ // Add nodes directly
if(stringTraceTripleEqual(jQuery.type(elem),stringTrace("object"))){ // Support: QtWebKit, PhantomJS
// push.apply(_, arraylike) throws on ancient WebKit
jQuery.merge(nodes,stringTraceUseValue(elem.nodeType)?[elem]:elem); // Convert non-html into a text node
}else if(!rhtml.test(elem)){nodes.push(context.createTextNode(elem)); // Convert html into DOM nodes
}else {tmp = tmp || fragment.appendChild(context.createElement(stringTrace("div"))); // Deserialize a standard representation
tag = (rtagName.exec(elem) || [stringTrace(""),stringTrace("")])[1].toLowerCase();wrap = wrapMap[tag] || wrapMap._default;stringTraceSetInnerHTML(tmp,stringTraceAdd(stringTraceAdd(wrap[1],elem.replace(rxhtmlTag,stringTrace("<$1></$2>"))),wrap[2])); // Descend through wrappers to the right content
j = wrap[0];while(stringTraceUseValue(j--)) {tmp = tmp.lastChild;} // Support: QtWebKit, PhantomJS
// push.apply(_, arraylike) throws on ancient WebKit
jQuery.merge(nodes,tmp.childNodes); // Remember the top-level container
tmp = fragment.firstChild; // Ensure the created nodes are orphaned (#12392)
tmp.textContent = stringTrace("");}}} // Remove wrapper from fragment
fragment.textContent = stringTrace("");i = 0;while(stringTraceUseValue(elem = nodes[i++])) { // #4087 - If origin and destination elements are the same, and this is
// that element, do not do anything
if(selection && stringTraceNotTripleEqual(jQuery.inArray(elem,selection),-1)){continue;}contains = jQuery.contains(elem.ownerDocument,elem); // Append to fragment
tmp = getAll(fragment.appendChild(elem),stringTrace("script")); // Preserve script evaluation history
if(contains){setGlobalEval(tmp);} // Capture executables
if(scripts){j = 0;while(stringTraceUseValue(elem = tmp[j++])) {if(rscriptType.test(elem.type || stringTrace(""))){scripts.push(elem);}}}}return fragment;},cleanData:function(elems){var data,elem,type,key,special=jQuery.event.special,i=0;for(;stringTraceNotTripleEqual(elem = elems[i],undefined);i++) {if(jQuery.acceptData(elem)){key = elem[data_priv.expando];if(key && (data = data_priv.cache[key])){if(data.events){for(type in data.events) {if(special[type]){jQuery.event.remove(elem,type); // This is a shortcut to avoid jQuery.event.remove's overhead
}else {jQuery.removeEvent(elem,type,data.handle);}}}if(data_priv.cache[key]){ // Discard any remaining `private` data
delete data_priv.cache[key];}}} // Discard any remaining `user` data
delete data_user.cache[elem[data_user.expando]];}}});jQuery.fn.extend({text:function(value){return access(this,function(value){return stringTraceUseValue(stringTraceTripleEqual(value,undefined))?jQuery.text(this):this.empty().each(function(){if(stringTraceTripleEqual(this.nodeType,1) || stringTraceTripleEqual(this.nodeType,11) || stringTraceTripleEqual(this.nodeType,9)){this.textContent = value;}});},null,value,arguments.length);},append:function(){return this.domManip(arguments,function(elem){if(stringTraceTripleEqual(this.nodeType,1) || stringTraceTripleEqual(this.nodeType,11) || stringTraceTripleEqual(this.nodeType,9)){var target=manipulationTarget(this,elem);target.appendChild(elem);}});},prepend:function(){return this.domManip(arguments,function(elem){if(stringTraceTripleEqual(this.nodeType,1) || stringTraceTripleEqual(this.nodeType,11) || stringTraceTripleEqual(this.nodeType,9)){var target=manipulationTarget(this,elem);target.insertBefore(elem,target.firstChild);}});},before:function(){return this.domManip(arguments,function(elem){if(this.parentNode){this.parentNode.insertBefore(elem,this);}});},after:function(){return this.domManip(arguments,function(elem){if(this.parentNode){this.parentNode.insertBefore(elem,this.nextSibling);}});},remove:function(selector,keepData /* Internal Use Only */){var elem,elems=stringTraceUseValue(selector)?jQuery.filter(selector,this):this,i=0;for(;(elem = elems[i]) != null;i++) {if(!keepData && stringTraceTripleEqual(elem.nodeType,1)){jQuery.cleanData(getAll(elem));}if(elem.parentNode){if(keepData && jQuery.contains(elem.ownerDocument,elem)){setGlobalEval(getAll(elem,stringTrace("script")));}elem.parentNode.removeChild(elem);}}return this;},empty:function(){var elem,i=0;for(;(elem = this[i]) != null;i++) {if(stringTraceTripleEqual(elem.nodeType,1)){ // Prevent memory leaks
jQuery.cleanData(getAll(elem,false)); // Remove any remaining nodes
elem.textContent = stringTrace("");}}return this;},clone:function(dataAndEvents,deepDataAndEvents){dataAndEvents = stringTraceUseValue(dataAndEvents == null)?false:dataAndEvents;deepDataAndEvents = stringTraceUseValue(deepDataAndEvents == null)?dataAndEvents:deepDataAndEvents;return this.map(function(){return jQuery.clone(this,dataAndEvents,deepDataAndEvents);});},html:function(value){return access(this,function(value){var elem=this[0] || {},i=0,l=this.length;if(stringTraceTripleEqual(value,undefined) && stringTraceTripleEqual(elem.nodeType,1)){return elem.innerHTML;} // See if we can take a shortcut and just use innerHTML
if(stringTraceTripleEqual(typeof value === "undefined"?"undefined":stringTraceTypeOf(value),stringTrace("string")) && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || [stringTrace(""),stringTrace("")])[1].toLowerCase()]){value = value.replace(rxhtmlTag,stringTrace("<$1></$2>"));try{for(;i < l;i++) {elem = this[i] || {}; // Remove element nodes and prevent memory leaks
if(stringTraceTripleEqual(elem.nodeType,1)){jQuery.cleanData(getAll(elem,false));stringTraceSetInnerHTML(elem,value);}}elem = 0; // If using innerHTML throws an exception, use the fallback method
}catch(e) {}}if(elem){this.empty().append(value);}},null,value,arguments.length);},replaceWith:function(){var arg=arguments[0]; // Make the changes, replacing each context element with the new content
this.domManip(arguments,function(elem){arg = this.parentNode;jQuery.cleanData(getAll(this));if(arg){arg.replaceChild(elem,this);}}); // Force removal if there was no new content (e.g., from empty arguments)
return stringTraceUseValue(arg && (arg.length || arg.nodeType))?this:this.remove();},detach:function(selector){return this.remove(selector,true);},domManip:function(args,callback){ // Flatten any nested arrays
args = concat.apply([],args);var fragment,first,scripts,hasScripts,node,doc,i=0,l=this.length,set=this,iNoClone=l - 1,value=args[0],isFunction=jQuery.isFunction(value); // We can't cloneNode fragments that contain checked, in WebKit
if(isFunction || l > 1 && stringTraceTripleEqual(typeof value === "undefined"?"undefined":stringTraceTypeOf(value),stringTrace("string")) && !support.checkClone && rchecked.test(value)){return this.each(function(index){var self=set.eq(index);if(isFunction){args[0] = value.call(this,index,self.html());}self.domManip(args,callback);});}if(l){fragment = jQuery.buildFragment(args,this[0].ownerDocument,false,this);first = fragment.firstChild;if(stringTraceTripleEqual(fragment.childNodes.length,1)){fragment = first;}if(first){scripts = jQuery.map(getAll(fragment,stringTrace("script")),disableScript);hasScripts = scripts.length; // Use the original fragment for the last item instead of the first because it can end up
// being emptied incorrectly in certain situations (#8070).
for(;i < l;i++) {node = fragment;if(stringTraceNotTripleEqual(i,iNoClone)){node = jQuery.clone(node,true,true); // Keep references to cloned scripts for later restoration
if(hasScripts){ // Support: QtWebKit
// jQuery.merge because push.apply(_, arraylike) throws
jQuery.merge(scripts,getAll(node,stringTrace("script")));}}callback.call(this[i],node,i);}if(hasScripts){doc = scripts[scripts.length - 1].ownerDocument; // Reenable scripts
jQuery.map(scripts,restoreScript); // Evaluate executable scripts on first document insertion
for(i = 0;i < hasScripts;i++) {node = scripts[i];if(rscriptType.test(node.type || stringTrace("")) && !data_priv.access(node,stringTrace("globalEval")) && jQuery.contains(doc,node)){if(node.src){ // Optional AJAX dependency, but won't run scripts if not present
if(jQuery._evalUrl){jQuery._evalUrl(node.src);}}else {jQuery.globalEval(node.textContent.replace(rcleanScript,stringTrace("")));}}}}}}return this;}});jQuery.each({appendTo:stringTrace("append"),prependTo:stringTrace("prepend"),insertBefore:stringTrace("before"),insertAfter:stringTrace("after"),replaceAll:stringTrace("replaceWith")},function(name,original){jQuery.fn[name] = function(selector){var elems,ret=[],insert=jQuery(selector),last=insert.length - 1,i=0;for(;i <= last;i++) {elems = stringTraceUseValue(stringTraceTripleEqual(i,last))?this:this.clone(true);jQuery(insert[i])[original](elems); // Support: QtWebKit
// .get() because push.apply(_, arraylike) throws
push.apply(ret,elems.get());}return this.pushStack(ret);};});var iframe,elemdisplay={}; /**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */ // Called only from within defaultDisplay
function actualDisplay(name,doc){var style,elem=jQuery(doc.createElement(name)).appendTo(doc.body), // getDefaultComputedStyle might be reliably used only on attached element
display=stringTraceUseValue(window.getDefaultComputedStyle && (style = window.getDefaultComputedStyle(elem[0])))? // Use of this method is a temporary fix (more like optimization) until something better comes along,
// since it was removed from specification and supported only in FF
style.display:jQuery.css(elem[0],stringTrace("display")); // We don't have any data stored on the element,
// so use "detach" method as fast way to get rid of the element
elem.detach();return display;} /**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */function defaultDisplay(nodeName){var doc=document,display=elemdisplay[nodeName];if(!display){display = actualDisplay(nodeName,doc); // If the simple way fails, read from inside an iframe
if(stringTraceTripleEqual(display,stringTrace("none")) || !display){ // Use the already-created iframe if possible
iframe = (iframe || jQuery(stringTrace("<iframe frameborder='0' width='0' height='0'/>"))).appendTo(doc.documentElement); // Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
doc = iframe[0].contentDocument; // Support: IE
doc.write();doc.close();display = actualDisplay(nodeName,doc);iframe.detach();} // Store the correct default display
elemdisplay[nodeName] = display;}return display;}var rmargin=/^margin/;var rnumnonpx=new RegExp(stringTraceAdd(stringTraceAdd(stringTrace("^("),pnum),stringTrace(")(?!px)[a-z%]+$")),stringTrace("i"));var getStyles=function(elem){ // Support: IE<=11+, Firefox<=30+ (#15098, #14150)
// IE throws on elements created in popups
// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
if(elem.ownerDocument.defaultView.opener){return elem.ownerDocument.defaultView.getComputedStyle(elem,null);}return window.getComputedStyle(elem,null);};function curCSS(elem,name,computed){var width,minWidth,maxWidth,ret,style=elem.style;computed = computed || getStyles(elem); // Support: IE9
// getPropertyValue is only needed for .css('filter') (#12537)
if(computed){ret = computed.getPropertyValue(name) || computed[name];}if(computed){if(stringTraceTripleEqual(ret,stringTrace("")) && !jQuery.contains(elem.ownerDocument,elem)){ret = jQuery.style(elem,name);} // Support: iOS < 6
// A tribute to the "awesome hack by Dean Edwards"
// iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
if(rnumnonpx.test(ret) && rmargin.test(name)){ // Remember the original values
width = style.width;minWidth = style.minWidth;maxWidth = style.maxWidth; // Put in the new values to get a computed value out
style.minWidth = style.maxWidth = style.width = ret;ret = computed.width; // Revert the changed values
style.width = width;style.minWidth = minWidth;style.maxWidth = maxWidth;}}return stringTraceUseValue(stringTraceNotTripleEqual(ret,undefined))? // Support: IE
// IE returns zIndex value as an integer.
stringTraceAdd(ret,stringTrace("")):ret;}function addGetHookIf(conditionFn,hookFn){ // Define the hook, we'll check on the first run if it's really needed.
return {get:function(){if(conditionFn()){ // Hook not needed (or it's not possible to use it due
// to missing dependency), remove it.
delete this.get;return;} // Hook needed; redefine it so that the support test is not executed again.
return (this.get = hookFn).apply(this,arguments);}};}(function(){var pixelPositionVal,boxSizingReliableVal,docElem=document.documentElement,container=document.createElement(stringTrace("div")),div=document.createElement(stringTrace("div"));if(!div.style){return;} // Support: IE9-11+
// Style of cloned element affects source element cloned (#8908)
div.style.backgroundClip = stringTrace("content-box");div.cloneNode(true).style.backgroundClip = stringTrace("");support.clearCloneStyle = stringTraceTripleEqual(div.style.backgroundClip,stringTrace("content-box"));container.style.cssText = stringTraceAdd(stringTrace("border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;"),stringTrace("position:absolute"));container.appendChild(div); // Executing both pixelPosition & boxSizingReliable tests require only one layout
// so they're executed at the same time to save the second computation.
function computePixelPositionAndBoxSizingReliable(){div.style.cssText =  // Support: Firefox<29, Android 2.3
// Vendor-prefix box-sizing
stringTraceAdd(stringTraceAdd(stringTrace("-webkit-box-sizing:border-box;-moz-box-sizing:border-box;"),stringTrace("box-sizing:border-box;display:block;margin-top:1%;top:1%;")),stringTrace("border:1px;padding:1px;width:4px;position:absolute"));stringTraceSetInnerHTML(div,stringTrace(""));docElem.appendChild(container);var divStyle=window.getComputedStyle(div,null);pixelPositionVal = stringTraceNotTripleEqual(divStyle.top,stringTrace("1%"));boxSizingReliableVal = stringTraceTripleEqual(divStyle.width,stringTrace("4px"));docElem.removeChild(container);} // Support: node.js jsdom
// Don't assume that getComputedStyle is a property of the global object
if(window.getComputedStyle){jQuery.extend(support,{pixelPosition:function(){ // This test is executed only once but we still do memoizing
// since we can use the boxSizingReliable pre-computing.
// No need to check if the test was already performed, though.
computePixelPositionAndBoxSizingReliable();return pixelPositionVal;},boxSizingReliable:function(){if(boxSizingReliableVal == null){computePixelPositionAndBoxSizingReliable();}return boxSizingReliableVal;},reliableMarginRight:function(){ // Support: Android 2.3
// Check if div with explicit width and no margin-right incorrectly
// gets computed margin-right based on width of container. (#3333)
// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
// This support function is only executed once so no memoizing is needed.
var ret,marginDiv=div.appendChild(document.createElement(stringTrace("div"))); // Reset CSS: box-sizing; display; margin; border; padding
marginDiv.style.cssText = div.style.cssText =  // Support: Firefox<29, Android 2.3
// Vendor-prefix box-sizing
stringTraceAdd(stringTrace("-webkit-box-sizing:content-box;-moz-box-sizing:content-box;"),stringTrace("box-sizing:content-box;display:block;margin:0;border:0;padding:0"));marginDiv.style.marginRight = marginDiv.style.width = stringTrace("0");div.style.width = stringTrace("1px");docElem.appendChild(container);ret = !parseFloat(window.getComputedStyle(marginDiv,null).marginRight);docElem.removeChild(container);div.removeChild(marginDiv);return ret;}});}})(); // A method for quickly swapping in/out CSS properties to get correct calculations.
jQuery.swap = function(elem,options,callback,args){var ret,name,old={}; // Remember the old values, and insert the new ones
for(name in options) {old[name] = elem.style[name];elem.style[name] = options[name];}ret = callback.apply(elem,args || []); // Revert the old values
for(name in options) {elem.style[name] = old[name];}return ret;};var  // Swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
rdisplayswap=/^(none|table(?!-c[ea]).+)/,rnumsplit=new RegExp(stringTraceAdd(stringTraceAdd(stringTrace("^("),pnum),stringTrace(")(.*)$")),stringTrace("i")),rrelNum=new RegExp(stringTraceAdd(stringTraceAdd(stringTrace("^([+-])=("),pnum),stringTrace(")")),stringTrace("i")),cssShow={position:stringTrace("absolute"),visibility:stringTrace("hidden"),display:stringTrace("block")},cssNormalTransform={letterSpacing:stringTrace("0"),fontWeight:stringTrace("400")},cssPrefixes=[stringTrace("Webkit"),stringTrace("O"),stringTrace("Moz"),stringTrace("ms")]; // Return a css property mapped to a potentially vendor prefixed property
function vendorPropName(style,name){ // Shortcut for names that are not vendor prefixed
if(name in style){return name;} // Check for vendor prefixed names
var capName=stringTraceAdd(name[0].toUpperCase(),name.slice(1)),origName=name,i=cssPrefixes.length;while(stringTraceUseValue(i--)) {name = stringTraceAdd(cssPrefixes[i],capName);if(name in style){return name;}}return origName;}function setPositiveNumber(elem,value,subtract){var matches=rnumsplit.exec(value);return stringTraceUseValue(matches)? // Guard against undefined "subtract", e.g., when used as in cssHooks
stringTraceAdd(Math.max(0,matches[1] - (subtract || 0)),matches[2] || stringTrace("px")):value;}function augmentWidthOrHeight(elem,name,extra,isBorderBox,styles){var i=stringTraceUseValue(stringTraceTripleEqual(extra,stringTraceUseValue(isBorderBox)?stringTrace("border"):stringTrace("content")))? // If we already have the right measurement, avoid augmentation
4: // Otherwise initialize for horizontal or vertical properties
stringTraceUseValue(stringTraceTripleEqual(name,stringTrace("width")))?1:0,val=0;for(;i < 4;i = stringTraceAdd(i,2)) { // Both box models exclude margin, so add it if we want it
if(stringTraceTripleEqual(extra,stringTrace("margin"))){val = stringTraceAdd(val,jQuery.css(elem,stringTraceAdd(extra,cssExpand[i]),true,styles));}if(isBorderBox){ // border-box includes padding, so remove it if we want content
if(stringTraceTripleEqual(extra,stringTrace("content"))){val -= jQuery.css(elem,stringTraceAdd(stringTrace("padding"),cssExpand[i]),true,styles);} // At this point, extra isn't border nor margin, so remove border
if(stringTraceNotTripleEqual(extra,stringTrace("margin"))){val -= jQuery.css(elem,stringTraceAdd(stringTraceAdd(stringTrace("border"),cssExpand[i]),stringTrace("Width")),true,styles);}}else { // At this point, extra isn't content, so add padding
val = stringTraceAdd(val,jQuery.css(elem,stringTraceAdd(stringTrace("padding"),cssExpand[i]),true,styles)); // At this point, extra isn't content nor padding, so add border
if(stringTraceNotTripleEqual(extra,stringTrace("padding"))){val = stringTraceAdd(val,jQuery.css(elem,stringTraceAdd(stringTraceAdd(stringTrace("border"),cssExpand[i]),stringTrace("Width")),true,styles));}}}return val;}function getWidthOrHeight(elem,name,extra){ // Start with offset property, which is equivalent to the border-box value
var valueIsBorderBox=true,val=stringTraceUseValue(stringTraceTripleEqual(name,stringTrace("width")))?elem.offsetWidth:elem.offsetHeight,styles=getStyles(elem),isBorderBox=stringTraceTripleEqual(jQuery.css(elem,stringTrace("boxSizing"),false,styles),stringTrace("border-box")); // Some non-html elements return undefined for offsetWidth, so check for null/undefined
// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
if(val <= 0 || val == null){ // Fall back to computed then uncomputed css if necessary
val = curCSS(elem,name,styles);if(val < 0 || val == null){val = elem.style[name];} // Computed unit is not pixels. Stop here and return.
if(rnumnonpx.test(val)){return val;} // Check for style in case a browser which returns unreliable values
// for getComputedStyle silently falls back to the reliable elem.style
valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || stringTraceTripleEqual(val,elem.style[name])); // Normalize "", auto, and prepare for extra
val = parseFloat(val) || 0;} // Use the active box-sizing model to add/subtract irrelevant styles
return stringTraceAdd(stringTraceAdd(val,augmentWidthOrHeight(elem,name,extra || (stringTraceUseValue(isBorderBox)?stringTrace("border"):stringTrace("content")),valueIsBorderBox,styles)),stringTrace("px"));}function showHide(elements,show){var display,elem,hidden,values=[],index=0,length=elements.length;for(;index < length;index++) {elem = elements[index];if(!elem.style){continue;}values[index] = data_priv.get(elem,stringTrace("olddisplay"));display = elem.style.display;if(show){ // Reset the inline display of this element to learn if it is
// being hidden by cascaded rules or not
if(!values[index] && stringTraceTripleEqual(display,stringTrace("none"))){elem.style.display = stringTrace("");} // Set elements which have been overridden with display: none
// in a stylesheet to whatever the default browser style is
// for such an element
if(stringTraceTripleEqual(elem.style.display,stringTrace("")) && isHidden(elem)){values[index] = data_priv.access(elem,stringTrace("olddisplay"),defaultDisplay(elem.nodeName));}}else {hidden = isHidden(elem);if(stringTraceNotTripleEqual(display,stringTrace("none")) || !hidden){data_priv.set(elem,stringTrace("olddisplay"),stringTraceUseValue(hidden)?display:jQuery.css(elem,stringTrace("display")));}}} // Set the display of most of the elements in a second loop
// to avoid the constant reflow
for(index = 0;index < length;index++) {elem = elements[index];if(!elem.style){continue;}if(!show || stringTraceTripleEqual(elem.style.display,stringTrace("none")) || stringTraceTripleEqual(elem.style.display,stringTrace(""))){elem.style.display = stringTraceUseValue(show)?values[index] || stringTrace(""):stringTrace("none");}}return elements;}jQuery.extend({ // Add in style property hooks for overriding the default
// behavior of getting and setting a style property
cssHooks:{opacity:{get:function(elem,computed){if(computed){ // We should always get a number back from opacity
var ret=curCSS(elem,stringTrace("opacity"));return stringTraceUseValue(stringTraceTripleEqual(ret,stringTrace("")))?stringTrace("1"):ret;}}}}, // Don't automatically add "px" to these possibly-unitless properties
cssNumber:{"columnCount":true,"fillOpacity":true,"flexGrow":true,"flexShrink":true,"fontWeight":true,"lineHeight":true,"opacity":true,"order":true,"orphans":true,"widows":true,"zIndex":true,"zoom":true}, // Add in properties whose names you wish to fix before
// setting or getting the value
cssProps:{"float":stringTrace("cssFloat")}, // Get and set the style property on a DOM Node
style:function(elem,name,value,extra){ // Don't set styles on text and comment nodes
if(!elem || stringTraceTripleEqual(elem.nodeType,3) || stringTraceTripleEqual(elem.nodeType,8) || !elem.style){return;} // Make sure that we're working with the right name
var ret,type,hooks,origName=jQuery.camelCase(name),style=elem.style;name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style,origName)); // Gets hook for the prefixed version, then unprefixed version
hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // Check if we're setting a value
if(stringTraceNotTripleEqual(value,undefined)){type = typeof value === "undefined"?"undefined":stringTraceTypeOf(value); // Convert "+=" or "-=" to relative numbers (#7345)
if(stringTraceTripleEqual(type,stringTrace("string")) && (ret = rrelNum.exec(value))){value = stringTraceAdd(stringTraceAdd(ret[1],1) * ret[2],parseFloat(jQuery.css(elem,name))); // Fixes bug #9237
type = stringTrace("number");} // Make sure that null and NaN values aren't set (#7116)
if(value == null || stringTraceNotTripleEqual(value,value)){return;} // If a number, add 'px' to the (except for certain CSS properties)
if(stringTraceTripleEqual(type,stringTrace("number")) && !jQuery.cssNumber[origName]){value = stringTraceAdd(value,stringTrace("px"));} // Support: IE9-11+
// background-* props affect original clone's values
if(!support.clearCloneStyle && stringTraceTripleEqual(value,stringTrace("")) && stringTraceTripleEqual(name.indexOf(stringTrace("background")),0)){style[name] = stringTrace("inherit");} // If a hook was provided, use that value, otherwise just set the specified value
if(!hooks || !(stringTrace("set") in hooks) || stringTraceNotTripleEqual(value = hooks.set(elem,value,extra),undefined)){style[name] = value;}}else { // If a hook was provided get the non-computed value from there
if(hooks && stringTrace("get") in hooks && stringTraceNotTripleEqual(ret = hooks.get(elem,false,extra),undefined)){return ret;} // Otherwise just get the value from the style object
return style[name];}},css:function(elem,name,extra,styles){var val,num,hooks,origName=jQuery.camelCase(name); // Make sure that we're working with the right name
name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style,origName)); // Try prefixed name followed by the unprefixed name
hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // If a hook was provided get the computed value from there
if(hooks && stringTrace("get") in hooks){val = hooks.get(elem,true,extra);} // Otherwise, if a way to get the computed value exists, use that
if(stringTraceTripleEqual(val,undefined)){val = curCSS(elem,name,styles);} // Convert "normal" to computed value
if(stringTraceTripleEqual(val,stringTrace("normal")) && name in cssNormalTransform){val = cssNormalTransform[name];} // Make numeric if forced or a qualifier was provided and val looks numeric
if(stringTraceTripleEqual(extra,stringTrace("")) || extra){num = parseFloat(val);return stringTraceUseValue(stringTraceTripleEqual(extra,true) || jQuery.isNumeric(num))?num || 0:val;}return val;}});jQuery.each([stringTrace("height"),stringTrace("width")],function(i,name){jQuery.cssHooks[name] = {get:function(elem,computed,extra){if(computed){ // Certain elements can have dimension info if we invisibly show them
// but it must have a current display style that would benefit
return stringTraceUseValue(rdisplayswap.test(jQuery.css(elem,stringTrace("display"))) && stringTraceTripleEqual(elem.offsetWidth,0))?jQuery.swap(elem,cssShow,function(){return getWidthOrHeight(elem,name,extra);}):getWidthOrHeight(elem,name,extra);}},set:function(elem,value,extra){var styles=extra && getStyles(elem);return setPositiveNumber(elem,value,stringTraceUseValue(extra)?augmentWidthOrHeight(elem,name,extra,stringTraceTripleEqual(jQuery.css(elem,stringTrace("boxSizing"),false,styles),stringTrace("border-box")),styles):0);}};}); // Support: Android 2.3
jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight,function(elem,computed){if(computed){return jQuery.swap(elem,{"display":stringTrace("inline-block")},curCSS,[elem,stringTrace("marginRight")]);}}); // These hooks are used by animate to expand properties
jQuery.each({margin:stringTrace(""),padding:stringTrace(""),border:stringTrace("Width")},function(prefix,suffix){jQuery.cssHooks[stringTraceAdd(prefix,suffix)] = {expand:function(value){var i=0,expanded={}, // Assumes a single number if not a string
parts=stringTraceUseValue(stringTraceTripleEqual(typeof value === "undefined"?"undefined":stringTraceTypeOf(value),stringTrace("string")))?value.split(stringTrace(" ")):[value];for(;i < 4;i++) {expanded[stringTraceAdd(stringTraceAdd(prefix,cssExpand[i]),suffix)] = parts[i] || parts[i - 2] || parts[0];}return expanded;}};if(!rmargin.test(prefix)){jQuery.cssHooks[stringTraceAdd(prefix,suffix)].set = setPositiveNumber;}});jQuery.fn.extend({css:function(name,value){return access(this,function(elem,name,value){var styles,len,map={},i=0;if(jQuery.isArray(name)){styles = getStyles(elem);len = name.length;for(;i < len;i++) {map[name[i]] = jQuery.css(elem,name[i],false,styles);}return map;}return stringTraceUseValue(stringTraceNotTripleEqual(value,undefined))?jQuery.style(elem,name,value):jQuery.css(elem,name);},name,value,arguments.length > 1);},show:function(){return showHide(this,true);},hide:function(){return showHide(this);},toggle:function(state){if(stringTraceTripleEqual(typeof state === "undefined"?"undefined":stringTraceTypeOf(state),stringTrace("boolean"))){return stringTraceUseValue(state)?this.show():this.hide();}return this.each(function(){if(isHidden(this)){jQuery(this).show();}else {jQuery(this).hide();}});}});function Tween(elem,options,prop,end,easing){return new Tween.prototype.init(elem,options,prop,end,easing);}jQuery.Tween = Tween;Tween.prototype = {constructor:Tween,init:function(elem,options,prop,end,easing,unit){this.elem = elem;this.prop = prop;this.easing = easing || stringTrace("swing");this.options = options;this.start = this.now = this.cur();this.end = end;this.unit = unit || (stringTraceUseValue(jQuery.cssNumber[prop])?stringTrace(""):stringTrace("px"));},cur:function(){var hooks=Tween.propHooks[this.prop];return stringTraceUseValue(hooks && hooks.get)?hooks.get(this):Tween.propHooks._default.get(this);},run:function(percent){var eased,hooks=Tween.propHooks[this.prop];if(this.options.duration){this.pos = eased = jQuery.easing[this.easing](percent,this.options.duration * percent,0,1,this.options.duration);}else {this.pos = eased = percent;}this.now = stringTraceAdd((this.end - this.start) * eased,this.start);if(this.options.step){this.options.step.call(this.elem,this.now,this);}if(hooks && hooks.set){hooks.set(this);}else {Tween.propHooks._default.set(this);}return this;}};Tween.prototype.init.prototype = Tween.prototype;Tween.propHooks = {_default:{get:function(tween){var result;if(tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)){return tween.elem[tween.prop];} // Passing an empty string as a 3rd parameter to .css will automatically
// attempt a parseFloat and fallback to a string if the parse fails.
// Simple values such as "10px" are parsed to Float;
// complex values such as "rotate(1rad)" are returned as-is.
result = jQuery.css(tween.elem,tween.prop,stringTrace("")); // Empty strings, null, undefined and "auto" are converted to 0.
return stringTraceUseValue(!result || stringTraceTripleEqual(result,stringTrace("auto")))?0:result;},set:function(tween){ // Use step hook for back compat.
// Use cssHook if its there.
// Use .style if available and use plain properties where available.
if(jQuery.fx.step[tween.prop]){jQuery.fx.step[tween.prop](tween);}else if(tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])){jQuery.style(tween.elem,tween.prop,stringTraceAdd(tween.now,tween.unit));}else {tween.elem[tween.prop] = tween.now;}}}}; // Support: IE9
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {set:function(tween){if(tween.elem.nodeType && tween.elem.parentNode){tween.elem[tween.prop] = tween.now;}}};jQuery.easing = {linear:function(p){return p;},swing:function(p){return 0.5 - Math.cos(p * Math.PI) / 2;}};jQuery.fx = Tween.prototype.init; // Back Compat <1.8 extension point
jQuery.fx.step = {};var fxNow,timerId,rfxtypes=/^(?:toggle|show|hide)$/,rfxnum=new RegExp(stringTraceAdd(stringTraceAdd(stringTrace("^(?:([+-])=|)("),pnum),stringTrace(")([a-z%]*)$")),stringTrace("i")),rrun=/queueHooks$/,animationPrefilters=[defaultPrefilter],tweeners={"*":[function(prop,value){var tween=this.createTween(prop,value),target=tween.cur(),parts=rfxnum.exec(value),unit=parts && parts[3] || (stringTraceUseValue(jQuery.cssNumber[prop])?stringTrace(""):stringTrace("px")), // Starting value computation is required for potential unit mismatches
start=(jQuery.cssNumber[prop] || stringTraceNotTripleEqual(unit,stringTrace("px")) && +target) && rfxnum.exec(jQuery.css(tween.elem,prop)),scale=1,maxIterations=20;if(start && stringTraceNotTripleEqual(start[3],unit)){ // Trust units reported by jQuery.css
unit = unit || start[3]; // Make sure we update the tween properties later on
parts = parts || []; // Iteratively approximate from a nonzero starting point
start = +target || 1;do { // If previous iteration zeroed out, double until we get *something*.
// Use string for doubling so we don't accidentally see scale as unchanged below
scale = scale || stringTrace(".5"); // Adjust and apply
start = start / scale;jQuery.style(tween.elem,prop,stringTraceAdd(start,unit)); // Update scale, tolerating zero or NaN from tween.cur(),
// break the loop if scale is unchanged or perfect, or if we've just had enough
}while(stringTraceNotTripleEqual(scale,scale = tween.cur() / target) && stringTraceNotTripleEqual(scale,1) && --maxIterations);} // Update tween properties
if(parts){start = tween.start = +start || +target || 0;tween.unit = unit; // If a +=/-= token was provided, we're doing a relative animation
tween.end = stringTraceUseValue(parts[1])?stringTraceAdd(start,stringTraceAdd(parts[1],1) * parts[2]):+parts[2];}return tween;}]}; // Animations created synchronously will run synchronously
function createFxNow(){setTimeout(function(){fxNow = undefined;});return fxNow = jQuery.now();} // Generate parameters to create a standard animation
function genFx(type,includeWidth){var which,i=0,attrs={height:type}; // If we include width, step value is 1 to do all cssExpand values,
// otherwise step value is 2 to skip over Left and Right
includeWidth = stringTraceUseValue(includeWidth)?1:0;for(;i < 4;i = stringTraceAdd(i,2 - includeWidth)) {which = cssExpand[i];attrs[stringTraceAdd(stringTrace("margin"),which)] = attrs[stringTraceAdd(stringTrace("padding"),which)] = type;}if(includeWidth){attrs.opacity = attrs.width = type;}return attrs;}function createTween(value,prop,animation){var tween,collection=(tweeners[prop] || []).concat(tweeners[stringTrace("*")]),index=0,length=collection.length;for(;index < length;index++) {if(tween = collection[index].call(animation,prop,value)){ // We're done with this property
return tween;}}}function defaultPrefilter(elem,props,opts){ /* jshint validthis: true */var prop,value,toggle,tween,hooks,oldfire,display,checkDisplay,anim=this,orig={},style=elem.style,hidden=elem.nodeType && isHidden(elem),dataShow=data_priv.get(elem,stringTrace("fxshow")); // Handle queue: false promises
if(!opts.queue){hooks = jQuery._queueHooks(elem,stringTrace("fx"));if(hooks.unqueued == null){hooks.unqueued = 0;oldfire = hooks.empty.fire;hooks.empty.fire = function(){if(!hooks.unqueued){oldfire();}};}hooks.unqueued++;anim.always(function(){ // Ensure the complete handler is called before this completes
anim.always(function(){hooks.unqueued--;if(!jQuery.queue(elem,stringTrace("fx")).length){hooks.empty.fire();}});});} // Height/width overflow pass
if(stringTraceTripleEqual(elem.nodeType,1) && (stringTrace("height") in props || stringTrace("width") in props)){ // Make sure that nothing sneaks out
// Record all 3 overflow attributes because IE9-10 do not
// change the overflow attribute when overflowX and
// overflowY are set to the same value
opts.overflow = [style.overflow,style.overflowX,style.overflowY]; // Set display property to inline-block for height/width
// animations on inline elements that are having width/height animated
display = jQuery.css(elem,stringTrace("display")); // Test default display if display is currently "none"
checkDisplay = stringTraceUseValue(stringTraceTripleEqual(display,stringTrace("none")))?data_priv.get(elem,stringTrace("olddisplay")) || defaultDisplay(elem.nodeName):display;if(stringTraceTripleEqual(checkDisplay,stringTrace("inline")) && stringTraceTripleEqual(jQuery.css(elem,stringTrace("float")),stringTrace("none"))){style.display = stringTrace("inline-block");}}if(opts.overflow){style.overflow = stringTrace("hidden");anim.always(function(){style.overflow = opts.overflow[0];style.overflowX = opts.overflow[1];style.overflowY = opts.overflow[2];});} // show/hide pass
for(prop in props) {value = props[prop];if(rfxtypes.exec(value)){delete props[prop];toggle = toggle || stringTraceTripleEqual(value,stringTrace("toggle"));if(stringTraceTripleEqual(value,stringTraceUseValue(hidden)?stringTrace("hide"):stringTrace("show"))){ // If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
if(stringTraceTripleEqual(value,stringTrace("show")) && dataShow && stringTraceNotTripleEqual(dataShow[prop],undefined)){hidden = true;}else {continue;}}orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem,prop); // Any non-fx value stops us from restoring the original display value
}else {display = undefined;}}if(!jQuery.isEmptyObject(orig)){if(dataShow){if(stringTrace("hidden") in dataShow){hidden = dataShow.hidden;}}else {dataShow = data_priv.access(elem,stringTrace("fxshow"),{});} // Store state if its toggle - enables .stop().toggle() to "reverse"
if(toggle){dataShow.hidden = !hidden;}if(hidden){jQuery(elem).show();}else {anim.done(function(){jQuery(elem).hide();});}anim.done(function(){var prop;data_priv.remove(elem,stringTrace("fxshow"));for(prop in orig) {jQuery.style(elem,prop,orig[prop]);}});for(prop in orig) {tween = createTween(stringTraceUseValue(hidden)?dataShow[prop]:0,prop,anim);if(!(prop in dataShow)){dataShow[prop] = tween.start;if(hidden){tween.end = tween.start;tween.start = stringTraceUseValue(stringTraceTripleEqual(prop,stringTrace("width")) || stringTraceTripleEqual(prop,stringTrace("height")))?1:0;}}} // If this is a noop like .hide().hide(), restore an overwritten display value
}else if(stringTraceTripleEqual(stringTraceUseValue(stringTraceTripleEqual(display,stringTrace("none")))?defaultDisplay(elem.nodeName):display,stringTrace("inline"))){style.display = display;}}function propFilter(props,specialEasing){var index,name,easing,value,hooks; // camelCase, specialEasing and expand cssHook pass
for(index in props) {name = jQuery.camelCase(index);easing = specialEasing[name];value = props[index];if(jQuery.isArray(value)){easing = value[1];value = props[index] = value[0];}if(stringTraceNotTripleEqual(index,name)){props[name] = value;delete props[index];}hooks = jQuery.cssHooks[name];if(hooks && stringTrace("expand") in hooks){value = hooks.expand(value);delete props[name]; // Not quite $.extend, this won't overwrite existing keys.
// Reusing 'index' because we have the correct "name"
for(index in value) {if(!(index in props)){props[index] = value[index];specialEasing[index] = easing;}}}else {specialEasing[name] = easing;}}}function Animation(elem,properties,options){var result,stopped,index=0,length=animationPrefilters.length,deferred=jQuery.Deferred().always(function(){ // Don't match elem in the :animated selector
delete tick.elem;}),tick=function(){if(stopped){return false;}var currentTime=fxNow || createFxNow(),remaining=Math.max(0,stringTraceAdd(animation.startTime,animation.duration) - currentTime), // Support: Android 2.3
// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
temp=remaining / animation.duration || 0,percent=1 - temp,index=0,length=animation.tweens.length;for(;index < length;index++) {animation.tweens[index].run(percent);}deferred.notifyWith(elem,[animation,percent,remaining]);if(percent < 1 && length){return remaining;}else {deferred.resolveWith(elem,[animation]);return false;}},animation=deferred.promise({elem:elem,props:jQuery.extend({},properties),opts:jQuery.extend(true,{specialEasing:{}},options),originalProperties:properties,originalOptions:options,startTime:fxNow || createFxNow(),duration:options.duration,tweens:[],createTween:function(prop,end){var tween=jQuery.Tween(elem,animation.opts,prop,end,animation.opts.specialEasing[prop] || animation.opts.easing);animation.tweens.push(tween);return tween;},stop:function(gotoEnd){var index=0, // If we are going to the end, we want to run all the tweens
// otherwise we skip this part
length=stringTraceUseValue(gotoEnd)?animation.tweens.length:0;if(stopped){return this;}stopped = true;for(;index < length;index++) {animation.tweens[index].run(1);} // Resolve when we played the last frame; otherwise, reject
if(gotoEnd){deferred.resolveWith(elem,[animation,gotoEnd]);}else {deferred.rejectWith(elem,[animation,gotoEnd]);}return this;}}),props=animation.props;propFilter(props,animation.opts.specialEasing);for(;index < length;index++) {result = animationPrefilters[index].call(animation,elem,props,animation.opts);if(result){return result;}}jQuery.map(props,createTween,animation);if(jQuery.isFunction(animation.opts.start)){animation.opts.start.call(elem,animation);}jQuery.fx.timer(jQuery.extend(tick,{elem:elem,anim:animation,queue:animation.opts.queue})); // attach callbacks from options
return animation.progress(animation.opts.progress).done(animation.opts.done,animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);}jQuery.Animation = jQuery.extend(Animation,{tweener:function(props,callback){if(jQuery.isFunction(props)){callback = props;props = [stringTrace("*")];}else {props = props.split(stringTrace(" "));}var prop,index=0,length=props.length;for(;index < length;index++) {prop = props[index];tweeners[prop] = tweeners[prop] || [];tweeners[prop].unshift(callback);}},prefilter:function(callback,prepend){if(prepend){animationPrefilters.unshift(callback);}else {animationPrefilters.push(callback);}}});jQuery.speed = function(speed,easing,fn){var opt=stringTraceUseValue(speed && stringTraceTripleEqual(typeof speed === "undefined"?"undefined":stringTraceTypeOf(speed),stringTrace("object")))?jQuery.extend({},speed):{complete:fn || !fn && easing || jQuery.isFunction(speed) && speed,duration:speed,easing:fn && easing || easing && !jQuery.isFunction(easing) && easing};opt.duration = stringTraceUseValue(jQuery.fx.off)?0:stringTraceUseValue(stringTraceTripleEqual(typeof opt.duration === "undefined"?"undefined":stringTraceTypeOf(opt.duration),stringTrace("number")))?opt.duration:stringTraceUseValue(opt.duration in jQuery.fx.speeds)?jQuery.fx.speeds[opt.duration]:jQuery.fx.speeds._default; // Normalize opt.queue - true/undefined/null -> "fx"
if(opt.queue == null || stringTraceTripleEqual(opt.queue,true)){opt.queue = stringTrace("fx");} // Queueing
opt.old = opt.complete;opt.complete = function(){if(jQuery.isFunction(opt.old)){opt.old.call(this);}if(opt.queue){jQuery.dequeue(this,opt.queue);}};return opt;};jQuery.fn.extend({fadeTo:function(speed,to,easing,callback){ // Show any hidden elements after setting opacity to 0
return this.filter(isHidden).css(stringTrace("opacity"),0).show() // Animate to the value specified
.end().animate({opacity:to},speed,easing,callback);},animate:function(prop,speed,easing,callback){var empty=jQuery.isEmptyObject(prop),optall=jQuery.speed(speed,easing,callback),doAnimation=function(){ // Operate on a copy of prop so per-property easing won't be lost
var anim=Animation(this,jQuery.extend({},prop),optall); // Empty animations, or finishing resolves immediately
if(empty || data_priv.get(this,stringTrace("finish"))){anim.stop(true);}};doAnimation.finish = doAnimation;return stringTraceUseValue(empty || stringTraceTripleEqual(optall.queue,false))?this.each(doAnimation):this.queue(optall.queue,doAnimation);},stop:function(type,clearQueue,gotoEnd){var stopQueue=function(hooks){var stop=hooks.stop;delete hooks.stop;stop(gotoEnd);};if(stringTraceNotTripleEqual(typeof type === "undefined"?"undefined":stringTraceTypeOf(type),stringTrace("string"))){gotoEnd = clearQueue;clearQueue = type;type = undefined;}if(clearQueue && stringTraceNotTripleEqual(type,false)){this.queue(type || stringTrace("fx"),[]);}return this.each(function(){var dequeue=true,index=type != null && stringTraceAdd(type,stringTrace("queueHooks")),timers=jQuery.timers,data=data_priv.get(this);if(index){if(data[index] && data[index].stop){stopQueue(data[index]);}}else {for(index in data) {if(data[index] && data[index].stop && rrun.test(index)){stopQueue(data[index]);}}}for(index = timers.length;index--;) {if(stringTraceTripleEqual(timers[index].elem,this) && (type == null || stringTraceTripleEqual(timers[index].queue,type))){timers[index].anim.stop(gotoEnd);dequeue = false;timers.splice(index,1);}} // Start the next in the queue if the last step wasn't forced.
// Timers currently will call their complete callbacks, which
// will dequeue but only if they were gotoEnd.
if(dequeue || !gotoEnd){jQuery.dequeue(this,type);}});},finish:function(type){if(stringTraceNotTripleEqual(type,false)){type = type || stringTrace("fx");}return this.each(function(){var index,data=data_priv.get(this),queue=data[stringTraceAdd(type,stringTrace("queue"))],hooks=data[stringTraceAdd(type,stringTrace("queueHooks"))],timers=jQuery.timers,length=stringTraceUseValue(queue)?queue.length:0; // Enable finishing flag on private data
data.finish = true; // Empty the queue first
jQuery.queue(this,type,[]);if(hooks && hooks.stop){hooks.stop.call(this,true);} // Look for any active animations, and finish them
for(index = timers.length;index--;) {if(stringTraceTripleEqual(timers[index].elem,this) && stringTraceTripleEqual(timers[index].queue,type)){timers[index].anim.stop(true);timers.splice(index,1);}} // Look for any animations in the old queue and finish them
for(index = 0;index < length;index++) {if(queue[index] && queue[index].finish){queue[index].finish.call(this);}} // Turn off finishing flag
delete data.finish;});}});jQuery.each([stringTrace("toggle"),stringTrace("show"),stringTrace("hide")],function(i,name){var cssFn=jQuery.fn[name];jQuery.fn[name] = function(speed,easing,callback){return stringTraceUseValue(speed == null || stringTraceTripleEqual(typeof speed === "undefined"?"undefined":stringTraceTypeOf(speed),stringTrace("boolean")))?cssFn.apply(this,arguments):this.animate(genFx(name,true),speed,easing,callback);};}); // Generate shortcuts for custom animations
jQuery.each({slideDown:genFx(stringTrace("show")),slideUp:genFx(stringTrace("hide")),slideToggle:genFx(stringTrace("toggle")),fadeIn:{opacity:stringTrace("show")},fadeOut:{opacity:stringTrace("hide")},fadeToggle:{opacity:stringTrace("toggle")}},function(name,props){jQuery.fn[name] = function(speed,easing,callback){return this.animate(props,speed,easing,callback);};});jQuery.timers = [];jQuery.fx.tick = function(){var timer,i=0,timers=jQuery.timers;fxNow = jQuery.now();for(;i < timers.length;i++) {timer = timers[i]; // Checks the timer has not already been removed
if(!timer() && stringTraceTripleEqual(timers[i],timer)){timers.splice(i--,1);}}if(!timers.length){jQuery.fx.stop();}fxNow = undefined;};jQuery.fx.timer = function(timer){jQuery.timers.push(timer);if(timer()){jQuery.fx.start();}else {jQuery.timers.pop();}};jQuery.fx.interval = 13;jQuery.fx.start = function(){if(!timerId){timerId = setInterval(jQuery.fx.tick,jQuery.fx.interval);}};jQuery.fx.stop = function(){clearInterval(timerId);timerId = null;};jQuery.fx.speeds = {slow:600,fast:200, // Default speed
_default:400}; // Based off of the plugin by Clint Helfers, with permission.
// http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function(time,type){time = stringTraceUseValue(jQuery.fx)?jQuery.fx.speeds[time] || time:time;type = type || stringTrace("fx");return this.queue(type,function(next,hooks){var timeout=setTimeout(next,time);hooks.stop = function(){clearTimeout(timeout);};});};(function(){var input=document.createElement(stringTrace("input")),select=document.createElement(stringTrace("select")),opt=select.appendChild(document.createElement(stringTrace("option")));input.type = stringTrace("checkbox"); // Support: iOS<=5.1, Android<=4.2+
// Default value for a checkbox should be "on"
support.checkOn = stringTraceNotTripleEqual(input.value,stringTrace("")); // Support: IE<=11+
// Must access selectedIndex to make default options select
support.optSelected = opt.selected; // Support: Android<=2.3
// Options inside disabled selects are incorrectly marked as disabled
select.disabled = true;support.optDisabled = !opt.disabled; // Support: IE<=11+
// An input loses its value after becoming a radio
input = document.createElement(stringTrace("input"));input.value = stringTrace("t");input.type = stringTrace("radio");support.radioValue = stringTraceTripleEqual(input.value,stringTrace("t"));})();var nodeHook,boolHook,attrHandle=jQuery.expr.attrHandle;jQuery.fn.extend({attr:function(name,value){return access(this,jQuery.attr,name,value,arguments.length > 1);},removeAttr:function(name){return this.each(function(){jQuery.removeAttr(this,name);});}});jQuery.extend({attr:function(elem,name,value){var hooks,ret,nType=elem.nodeType; // don't get/set attributes on text, comment and attribute nodes
if(!elem || stringTraceTripleEqual(nType,3) || stringTraceTripleEqual(nType,8) || stringTraceTripleEqual(nType,2)){return;} // Fallback to prop when attributes are not supported
if(stringTraceTripleEqual(typeof elem.getAttribute === "undefined"?"undefined":stringTraceTypeOf(elem.getAttribute),strundefined)){return jQuery.prop(elem,name,value);} // All attributes are lowercase
// Grab necessary hook if one is defined
if(stringTraceNotTripleEqual(nType,1) || !jQuery.isXMLDoc(elem)){name = name.toLowerCase();hooks = jQuery.attrHooks[name] || (stringTraceUseValue(jQuery.expr.match.bool.test(name))?boolHook:nodeHook);}if(stringTraceNotTripleEqual(value,undefined)){if(stringTraceTripleEqual(value,null)){jQuery.removeAttr(elem,name);}else if(hooks && stringTrace("set") in hooks && stringTraceNotTripleEqual(ret = hooks.set(elem,value,name),undefined)){return ret;}else {elem.setAttribute(name,stringTraceAdd(value,stringTrace("")));return value;}}else if(hooks && stringTrace("get") in hooks && stringTraceNotTripleEqual(ret = hooks.get(elem,name),null)){return ret;}else {ret = jQuery.find.attr(elem,name); // Non-existent attributes return null, we normalize to undefined
return stringTraceUseValue(ret == null)?undefined:ret;}},removeAttr:function(elem,value){var name,propName,i=0,attrNames=value && value.match(rnotwhite);if(attrNames && stringTraceTripleEqual(elem.nodeType,1)){while(stringTraceUseValue(name = attrNames[i++])) {propName = jQuery.propFix[name] || name; // Boolean attributes get special treatment (#10870)
if(jQuery.expr.match.bool.test(name)){ // Set corresponding property to false
elem[propName] = false;}elem.removeAttribute(name);}}},attrHooks:{type:{set:function(elem,value){if(!support.radioValue && stringTraceTripleEqual(value,stringTrace("radio")) && jQuery.nodeName(elem,stringTrace("input"))){var val=elem.value;elem.setAttribute(stringTrace("type"),value);if(val){elem.value = val;}return value;}}}}}); // Hooks for boolean attributes
boolHook = {set:function(elem,value,name){if(stringTraceTripleEqual(value,false)){ // Remove boolean attributes when set to false
jQuery.removeAttr(elem,name);}else {elem.setAttribute(name,name);}return name;}};jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g),function(i,name){var getter=attrHandle[name] || jQuery.find.attr;attrHandle[name] = function(elem,name,isXML){var ret,handle;if(!isXML){ // Avoid an infinite loop by temporarily removing this function from the getter
handle = attrHandle[name];attrHandle[name] = ret;ret = stringTraceUseValue(getter(elem,name,isXML) != null)?name.toLowerCase():null;attrHandle[name] = handle;}return ret;};});var rfocusable=/^(?:input|select|textarea|button)$/i;jQuery.fn.extend({prop:function(name,value){return access(this,jQuery.prop,name,value,arguments.length > 1);},removeProp:function(name){return this.each(function(){delete this[jQuery.propFix[name] || name];});}});jQuery.extend({propFix:{"for":stringTrace("htmlFor"),"class":stringTrace("className")},prop:function(elem,name,value){var ret,hooks,notxml,nType=elem.nodeType; // Don't get/set properties on text, comment and attribute nodes
if(!elem || stringTraceTripleEqual(nType,3) || stringTraceTripleEqual(nType,8) || stringTraceTripleEqual(nType,2)){return;}notxml = stringTraceNotTripleEqual(nType,1) || !jQuery.isXMLDoc(elem);if(notxml){ // Fix name and attach hooks
name = jQuery.propFix[name] || name;hooks = jQuery.propHooks[name];}if(stringTraceNotTripleEqual(value,undefined)){return stringTraceUseValue(hooks && stringTrace("set") in hooks && stringTraceNotTripleEqual(ret = hooks.set(elem,value,name),undefined))?ret:elem[name] = value;}else {return stringTraceUseValue(hooks && stringTrace("get") in hooks && stringTraceNotTripleEqual(ret = hooks.get(elem,name),null))?ret:elem[name];}},propHooks:{tabIndex:{get:function(elem){return stringTraceUseValue(elem.hasAttribute(stringTrace("tabindex")) || rfocusable.test(elem.nodeName) || elem.href)?elem.tabIndex:-1;}}}});if(!support.optSelected){jQuery.propHooks.selected = {get:function(elem){var parent=elem.parentNode;if(parent && parent.parentNode){parent.parentNode.selectedIndex;}return null;}};}jQuery.each([stringTrace("tabIndex"),stringTrace("readOnly"),stringTrace("maxLength"),stringTrace("cellSpacing"),stringTrace("cellPadding"),stringTrace("rowSpan"),stringTrace("colSpan"),stringTrace("useMap"),stringTrace("frameBorder"),stringTrace("contentEditable")],function(){jQuery.propFix[this.toLowerCase()] = this;});var rclass=/[\t\r\n\f]/g;jQuery.fn.extend({addClass:function(value){var classes,elem,cur,clazz,j,finalValue,proceed=stringTraceTripleEqual(typeof value === "undefined"?"undefined":stringTraceTypeOf(value),stringTrace("string")) && value,i=0,len=this.length;if(jQuery.isFunction(value)){return this.each(function(j){jQuery(this).addClass(value.call(this,j,this.className));});}if(proceed){ // The disjunction here is for better compressibility (see removeClass)
classes = (value || stringTrace("")).match(rnotwhite) || [];for(;i < len;i++) {elem = this[i];cur = stringTraceTripleEqual(elem.nodeType,1) && (stringTraceUseValue(elem.className)?stringTraceAdd(stringTraceAdd(stringTrace(" "),elem.className),stringTrace(" ")).replace(rclass,stringTrace(" ")):stringTrace(" "));if(cur){j = 0;while(stringTraceUseValue(clazz = classes[j++])) {if(cur.indexOf(stringTraceAdd(stringTraceAdd(stringTrace(" "),clazz),stringTrace(" "))) < 0){cur = stringTraceAdd(cur,stringTraceAdd(clazz,stringTrace(" ")));}} // only assign if different to avoid unneeded rendering.
finalValue = jQuery.trim(cur);if(stringTraceNotTripleEqual(elem.className,finalValue)){elem.className = finalValue;}}}}return this;},removeClass:function(value){var classes,elem,cur,clazz,j,finalValue,proceed=stringTraceTripleEqual(arguments.length,0) || stringTraceTripleEqual(typeof value === "undefined"?"undefined":stringTraceTypeOf(value),stringTrace("string")) && value,i=0,len=this.length;if(jQuery.isFunction(value)){return this.each(function(j){jQuery(this).removeClass(value.call(this,j,this.className));});}if(proceed){classes = (value || stringTrace("")).match(rnotwhite) || [];for(;i < len;i++) {elem = this[i]; // This expression is here for better compressibility (see addClass)
cur = stringTraceTripleEqual(elem.nodeType,1) && (stringTraceUseValue(elem.className)?stringTraceAdd(stringTraceAdd(stringTrace(" "),elem.className),stringTrace(" ")).replace(rclass,stringTrace(" ")):stringTrace(""));if(cur){j = 0;while(stringTraceUseValue(clazz = classes[j++])) { // Remove *all* instances
while(stringTraceUseValue(cur.indexOf(stringTraceAdd(stringTraceAdd(stringTrace(" "),clazz),stringTrace(" "))) >= 0)) {cur = cur.replace(stringTraceAdd(stringTraceAdd(stringTrace(" "),clazz),stringTrace(" ")),stringTrace(" "));}} // Only assign if different to avoid unneeded rendering.
finalValue = stringTraceUseValue(value)?jQuery.trim(cur):stringTrace("");if(stringTraceNotTripleEqual(elem.className,finalValue)){elem.className = finalValue;}}}}return this;},toggleClass:function(value,stateVal){var type=typeof value === "undefined"?"undefined":stringTraceTypeOf(value);if(stringTraceTripleEqual(typeof stateVal === "undefined"?"undefined":stringTraceTypeOf(stateVal),stringTrace("boolean")) && stringTraceTripleEqual(type,stringTrace("string"))){return stringTraceUseValue(stateVal)?this.addClass(value):this.removeClass(value);}if(jQuery.isFunction(value)){return this.each(function(i){jQuery(this).toggleClass(value.call(this,i,this.className,stateVal),stateVal);});}return this.each(function(){if(stringTraceTripleEqual(type,stringTrace("string"))){ // Toggle individual class names
var className,i=0,self=jQuery(this),classNames=value.match(rnotwhite) || [];while(stringTraceUseValue(className = classNames[i++])) { // Check each className given, space separated list
if(self.hasClass(className)){self.removeClass(className);}else {self.addClass(className);}} // Toggle whole class name
}else if(stringTraceTripleEqual(type,strundefined) || stringTraceTripleEqual(type,stringTrace("boolean"))){if(this.className){ // store className if set
data_priv.set(this,stringTrace("__className__"),this.className);} // If the element has a class name or if we're passed `false`,
// then remove the whole classname (if there was one, the above saved it).
// Otherwise bring back whatever was previously saved (if anything),
// falling back to the empty string if nothing was stored.
this.className = stringTraceUseValue(this.className || stringTraceTripleEqual(value,false))?stringTrace(""):data_priv.get(this,stringTrace("__className__")) || stringTrace("");}});},hasClass:function(selector){var className=stringTraceAdd(stringTraceAdd(stringTrace(" "),selector),stringTrace(" ")),i=0,l=this.length;for(;i < l;i++) {if(stringTraceTripleEqual(this[i].nodeType,1) && stringTraceAdd(stringTraceAdd(stringTrace(" "),this[i].className),stringTrace(" ")).replace(rclass,stringTrace(" ")).indexOf(className) >= 0){return true;}}return false;}});var rreturn=/\r/g;jQuery.fn.extend({val:function(value){var hooks,ret,isFunction,elem=this[0];if(!arguments.length){if(elem){hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];if(hooks && stringTrace("get") in hooks && stringTraceNotTripleEqual(ret = hooks.get(elem,stringTrace("value")),undefined)){return ret;}ret = elem.value;return stringTraceUseValue(stringTraceTripleEqual(typeof ret === "undefined"?"undefined":stringTraceTypeOf(ret),stringTrace("string")))? // Handle most common string cases
ret.replace(rreturn,stringTrace("")): // Handle cases where value is null/undef or number
stringTraceUseValue(ret == null)?stringTrace(""):ret;}return;}isFunction = jQuery.isFunction(value);return this.each(function(i){var val;if(stringTraceNotTripleEqual(this.nodeType,1)){return;}if(isFunction){val = value.call(this,i,jQuery(this).val());}else {val = value;} // Treat null/undefined as ""; convert numbers to string
if(val == null){val = stringTrace("");}else if(stringTraceTripleEqual(typeof val === "undefined"?"undefined":stringTraceTypeOf(val),stringTrace("number"))){val = stringTraceAdd(val,stringTrace(""));}else if(jQuery.isArray(val)){val = jQuery.map(val,function(value){return stringTraceUseValue(value == null)?stringTrace(""):stringTraceAdd(value,stringTrace(""));});}hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()]; // If set returns undefined, fall back to normal setting
if(!hooks || !(stringTrace("set") in hooks) || stringTraceTripleEqual(hooks.set(this,val,stringTrace("value")),undefined)){this.value = val;}});}});jQuery.extend({valHooks:{option:{get:function(elem){var val=jQuery.find.attr(elem,stringTrace("value"));return stringTraceUseValue(val != null)?val: // Support: IE10-11+
// option.text throws exceptions (#14686, #14858)
jQuery.trim(jQuery.text(elem));}},select:{get:function(elem){var value,option,options=elem.options,index=elem.selectedIndex,one=stringTraceTripleEqual(elem.type,stringTrace("select-one")) || index < 0,values=stringTraceUseValue(one)?null:[],max=stringTraceUseValue(one)?stringTraceAdd(index,1):options.length,i=stringTraceUseValue(index < 0)?max:stringTraceUseValue(one)?index:0; // Loop through all the selected options
for(;i < max;i++) {option = options[i]; // IE6-9 doesn't update selected after form reset (#2551)
if((option.selected || stringTraceTripleEqual(i,index)) && ( // Don't return options that are disabled or in a disabled optgroup
stringTraceUseValue(support.optDisabled)?!option.disabled:stringTraceTripleEqual(option.getAttribute(stringTrace("disabled")),null)) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode,stringTrace("optgroup")))){ // Get the specific value for the option
value = jQuery(option).val(); // We don't need an array for one selects
if(one){return value;} // Multi-Selects return an array
values.push(value);}}return values;},set:function(elem,value){var optionSet,option,options=elem.options,values=jQuery.makeArray(value),i=options.length;while(stringTraceUseValue(i--)) {option = options[i];if(option.selected = jQuery.inArray(option.value,values) >= 0){optionSet = true;}} // Force browsers to behave consistently when non-matching value is set
if(!optionSet){elem.selectedIndex = -1;}return values;}}}}); // Radios and checkboxes getter/setter
jQuery.each([stringTrace("radio"),stringTrace("checkbox")],function(){jQuery.valHooks[this] = {set:function(elem,value){if(jQuery.isArray(value)){return elem.checked = jQuery.inArray(jQuery(elem).val(),value) >= 0;}}};if(!support.checkOn){jQuery.valHooks[this].get = function(elem){return stringTraceUseValue(stringTraceTripleEqual(elem.getAttribute(stringTrace("value")),null))?stringTrace("on"):elem.value;};}}); // Return jQuery for attributes-only inclusion
jQuery.each(stringTraceAdd(stringTraceAdd(stringTrace("blur focus focusin focusout load resize scroll unload click dblclick "),stringTrace("mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave ")),stringTrace("change select submit keydown keypress keyup error contextmenu")).split(stringTrace(" ")),function(i,name){ // Handle event binding
jQuery.fn[name] = function(data,fn){return stringTraceUseValue(arguments.length > 0)?this.on(name,null,data,fn):this.trigger(name);};});jQuery.fn.extend({hover:function(fnOver,fnOut){return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);},bind:function(types,data,fn){return this.on(types,null,data,fn);},unbind:function(types,fn){return this.off(types,null,fn);},delegate:function(selector,types,data,fn){return this.on(types,selector,data,fn);},undelegate:function(selector,types,fn){ // ( namespace ) or ( selector, types [, fn] )
return stringTraceUseValue(stringTraceTripleEqual(arguments.length,1))?this.off(selector,stringTrace("**")):this.off(types,selector || stringTrace("**"),fn);}});var nonce=jQuery.now();var rquery=/\?/; // Support: Android 2.3
// Workaround failure to string-cast null input
jQuery.parseJSON = function(data){return JSON.parse(stringTraceAdd(data,stringTrace("")));}; // Cross-browser xml parsing
jQuery.parseXML = function(data){var xml,tmp;if(!data || stringTraceNotTripleEqual(typeof data === "undefined"?"undefined":stringTraceTypeOf(data),stringTrace("string"))){return null;} // Support: IE9
try{tmp = new DOMParser();xml = tmp.parseFromString(data,stringTrace("text/xml"));}catch(e) {xml = undefined;}if(!xml || xml.getElementsByTagName(stringTrace("parsererror")).length){jQuery.error(stringTraceAdd(stringTrace("Invalid XML: "),data));}return xml;};var rhash=/#.*$/,rts=/([?&])_=[^&]*/,rheaders=/^(.*?):[ \t]*([^\r\n]*)$/mg, // #7653, #8125, #8152: local protocol detection
rlocalProtocol=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,rnoContent=/^(?:GET|HEAD)$/,rprotocol=/^\/\//,rurl=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/, /* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */prefilters={}, /* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */transports={}, // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
allTypes=stringTrace("*/").concat(stringTrace("*")), // Document location
ajaxLocation=window.location.href, // Segment location into parts
ajaxLocParts=rurl.exec(ajaxLocation.toLowerCase()) || []; // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports(structure){ // dataTypeExpression is optional and defaults to "*"
return function(dataTypeExpression,func){if(stringTraceNotTripleEqual(typeof dataTypeExpression === "undefined"?"undefined":stringTraceTypeOf(dataTypeExpression),stringTrace("string"))){func = dataTypeExpression;dataTypeExpression = stringTrace("*");}var dataType,i=0,dataTypes=dataTypeExpression.toLowerCase().match(rnotwhite) || [];if(jQuery.isFunction(func)){ // For each dataType in the dataTypeExpression
while(stringTraceUseValue(dataType = dataTypes[i++])) { // Prepend if requested
if(stringTraceTripleEqual(dataType[0],stringTrace("+"))){dataType = dataType.slice(1) || stringTrace("*");(structure[dataType] = structure[dataType] || []).unshift(func); // Otherwise append
}else {(structure[dataType] = structure[dataType] || []).push(func);}}}};} // Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports(structure,options,originalOptions,jqXHR){var inspected={},seekingTransport=stringTraceTripleEqual(structure,transports);function inspect(dataType){var selected;inspected[dataType] = true;jQuery.each(structure[dataType] || [],function(_,prefilterOrFactory){var dataTypeOrTransport=prefilterOrFactory(options,originalOptions,jqXHR);if(stringTraceTripleEqual(typeof dataTypeOrTransport === "undefined"?"undefined":stringTraceTypeOf(dataTypeOrTransport),stringTrace("string")) && !seekingTransport && !inspected[dataTypeOrTransport]){options.dataTypes.unshift(dataTypeOrTransport);inspect(dataTypeOrTransport);return false;}else if(seekingTransport){return !(selected = dataTypeOrTransport);}});return selected;}return inspect(options.dataTypes[0]) || !inspected[stringTrace("*")] && inspect(stringTrace("*"));} // A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend(target,src){var key,deep,flatOptions=jQuery.ajaxSettings.flatOptions || {};for(key in src) {if(stringTraceNotTripleEqual(src[key],undefined)){(stringTraceUseValue(flatOptions[key])?target:deep || (deep = {}))[key] = src[key];}}if(deep){jQuery.extend(true,target,deep);}return target;} /* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */function ajaxHandleResponses(s,jqXHR,responses){var ct,type,finalDataType,firstDataType,contents=s.contents,dataTypes=s.dataTypes; // Remove auto dataType and get content-type in the process
while(stringTraceUseValue(stringTraceTripleEqual(dataTypes[0],stringTrace("*")))) {dataTypes.shift();if(stringTraceTripleEqual(ct,undefined)){ct = s.mimeType || jqXHR.getResponseHeader(stringTrace("Content-Type"));}} // Check if we're dealing with a known content-type
if(ct){for(type in contents) {if(contents[type] && contents[type].test(ct)){dataTypes.unshift(type);break;}}} // Check to see if we have a response for the expected dataType
if(dataTypes[0] in responses){finalDataType = dataTypes[0];}else { // Try convertible dataTypes
for(type in responses) {if(!dataTypes[0] || s.converters[stringTraceAdd(stringTraceAdd(type,stringTrace(" ")),dataTypes[0])]){finalDataType = type;break;}if(!firstDataType){firstDataType = type;}} // Or just use first one
finalDataType = finalDataType || firstDataType;} // If we found a dataType
// We add the dataType to the list if needed
// and return the corresponding response
if(finalDataType){if(stringTraceNotTripleEqual(finalDataType,dataTypes[0])){dataTypes.unshift(finalDataType);}return responses[finalDataType];}} /* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */function ajaxConvert(s,response,jqXHR,isSuccess){var conv2,current,conv,tmp,prev,converters={}, // Work with a copy of dataTypes in case we need to modify it for conversion
dataTypes=s.dataTypes.slice(); // Create converters map with lowercased keys
if(dataTypes[1]){for(conv in s.converters) {converters[conv.toLowerCase()] = s.converters[conv];}}current = dataTypes.shift(); // Convert to each sequential dataType
while(stringTraceUseValue(current)) {if(s.responseFields[current]){jqXHR[s.responseFields[current]] = response;} // Apply the dataFilter if provided
if(!prev && isSuccess && s.dataFilter){response = s.dataFilter(response,s.dataType);}prev = current;current = dataTypes.shift();if(current){ // There's only work to do if current dataType is non-auto
if(stringTraceTripleEqual(current,stringTrace("*"))){current = prev; // Convert response if prev dataType is non-auto and differs from current
}else if(stringTraceNotTripleEqual(prev,stringTrace("*")) && stringTraceNotTripleEqual(prev,current)){ // Seek a direct converter
conv = converters[stringTraceAdd(stringTraceAdd(prev,stringTrace(" ")),current)] || converters[stringTraceAdd(stringTrace("* "),current)]; // If none found, seek a pair
if(!conv){for(conv2 in converters) { // If conv2 outputs current
tmp = conv2.split(stringTrace(" "));if(stringTraceTripleEqual(tmp[1],current)){ // If prev can be converted to accepted input
conv = converters[stringTraceAdd(stringTraceAdd(prev,stringTrace(" ")),tmp[0])] || converters[stringTraceAdd(stringTrace("* "),tmp[0])];if(conv){ // Condense equivalence converters
if(stringTraceTripleEqual(conv,true)){conv = converters[conv2]; // Otherwise, insert the intermediate dataType
}else if(stringTraceNotTripleEqual(converters[conv2],true)){current = tmp[0];dataTypes.unshift(tmp[1]);}break;}}}} // Apply converter (if not an equivalence)
if(stringTraceNotTripleEqual(conv,true)){ // Unless errors are allowed to bubble, catch and return them
if(conv && s[stringTrace("throws")]){response = conv(response);}else {try{response = conv(response);}catch(e) {return {state:stringTrace("parsererror"),error:stringTraceUseValue(conv)?e:stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTrace("No conversion from "),prev),stringTrace(" to ")),current)};}}}}}}return {state:stringTrace("success"),data:response};}jQuery.extend({ // Counter for holding the number of active queries
active:0, // Last-Modified header cache for next request
lastModified:{},etag:{},ajaxSettings:{url:ajaxLocation,type:stringTrace("GET"),isLocal:rlocalProtocol.test(ajaxLocParts[1]),global:true,processData:true,async:true,contentType:stringTrace("application/x-www-form-urlencoded; charset=UTF-8"), /*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/accepts:{"*":allTypes,text:stringTrace("text/plain"),html:stringTrace("text/html"),xml:stringTrace("application/xml, text/xml"),json:stringTrace("application/json, text/javascript")},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:stringTrace("responseXML"),text:stringTrace("responseText"),json:stringTrace("responseJSON")}, // Data converters
// Keys separate source (or catchall "*") and destination types with a single space
converters:{ // Convert anything to text
"* text":String, // Text to html (true = no transformation)
"text html":true, // Evaluate text as a json expression
"text json":jQuery.parseJSON, // Parse text as xml
"text xml":jQuery.parseXML}, // For options that shouldn't be deep extended:
// you can add your own custom options here if
// and when you create one that shouldn't be
// deep extended (see ajaxExtend)
flatOptions:{url:true,context:true}}, // Creates a full fledged settings object into target
// with both ajaxSettings and settings fields.
// If target is omitted, writes into ajaxSettings.
ajaxSetup:function(target,settings){return stringTraceUseValue(settings)? // Building a settings object
ajaxExtend(ajaxExtend(target,jQuery.ajaxSettings),settings): // Extending ajaxSettings
ajaxExtend(jQuery.ajaxSettings,target);},ajaxPrefilter:addToPrefiltersOrTransports(prefilters),ajaxTransport:addToPrefiltersOrTransports(transports), // Main method
ajax:function(url,options){ // If url is an object, simulate pre-1.5 signature
if(stringTraceTripleEqual(typeof url === "undefined"?"undefined":stringTraceTypeOf(url),stringTrace("object"))){options = url;url = undefined;} // Force options to be an object
options = options || {};var transport, // URL without anti-cache param
cacheURL, // Response headers
responseHeadersString,responseHeaders, // timeout handle
timeoutTimer, // Cross-domain detection vars
parts, // To know if global events are to be dispatched
fireGlobals, // Loop variable
i, // Create the final options object
s=jQuery.ajaxSetup({},options), // Callbacks context
callbackContext=s.context || s, // Context for global events is callbackContext if it is a DOM node or jQuery collection
globalEventContext=stringTraceUseValue(s.context && (callbackContext.nodeType || callbackContext.jquery))?jQuery(callbackContext):jQuery.event, // Deferreds
deferred=jQuery.Deferred(),completeDeferred=jQuery.Callbacks(stringTrace("once memory")), // Status-dependent callbacks
statusCode=s.statusCode || {}, // Headers (they are sent all at once)
requestHeaders={},requestHeadersNames={}, // The jqXHR state
state=0, // Default abort message
strAbort=stringTrace("canceled"), // Fake xhr
jqXHR={readyState:0, // Builds headers hashtable if needed
getResponseHeader:function(key){var match;if(stringTraceTripleEqual(state,2)){if(!responseHeaders){responseHeaders = {};while(stringTraceUseValue(match = rheaders.exec(responseHeadersString))) {responseHeaders[match[1].toLowerCase()] = match[2];}}match = responseHeaders[key.toLowerCase()];}return stringTraceUseValue(match == null)?null:match;}, // Raw string
getAllResponseHeaders:function(){return stringTraceUseValue(stringTraceTripleEqual(state,2))?responseHeadersString:null;}, // Caches the header
setRequestHeader:function(name,value){var lname=name.toLowerCase();if(!state){name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;requestHeaders[name] = value;}return this;}, // Overrides response content-type header
overrideMimeType:function(type){if(!state){s.mimeType = type;}return this;}, // Status-dependent callbacks
statusCode:function(map){var code;if(map){if(state < 2){for(code in map) { // Lazy-add the new callback in a way that preserves old ones
statusCode[code] = [statusCode[code],map[code]];}}else { // Execute the appropriate callbacks
jqXHR.always(map[jqXHR.status]);}}return this;}, // Cancel the request
abort:function(statusText){var finalText=statusText || strAbort;if(transport){transport.abort(finalText);}done(0,finalText);return this;}}; // Attach deferreds
deferred.promise(jqXHR).complete = completeDeferred.add;jqXHR.success = jqXHR.done;jqXHR.error = jqXHR.fail; // Remove hash character (#7531: and string promotion)
// Add protocol if not provided (prefilters might expect it)
// Handle falsy url in the settings object (#10093: consistency with old signature)
// We also use the url parameter if available
s.url = stringTraceAdd(url || s.url || ajaxLocation,stringTrace("")).replace(rhash,stringTrace("")).replace(rprotocol,stringTraceAdd(ajaxLocParts[1],stringTrace("//"))); // Alias method option to type as per ticket #12004
s.type = options.method || options.type || s.method || s.type; // Extract dataTypes list
s.dataTypes = jQuery.trim(s.dataType || stringTrace("*")).toLowerCase().match(rnotwhite) || [stringTrace("")]; // A cross-domain request is in order when we have a protocol:host:port mismatch
if(s.crossDomain == null){parts = rurl.exec(s.url.toLowerCase());s.crossDomain = !!(parts && (stringTraceNotTripleEqual(parts[1],ajaxLocParts[1]) || stringTraceNotTripleEqual(parts[2],ajaxLocParts[2]) || stringTraceNotTripleEqual(parts[3] || (stringTraceUseValue(stringTraceTripleEqual(parts[1],stringTrace("http:")))?stringTrace("80"):stringTrace("443")),ajaxLocParts[3] || (stringTraceUseValue(stringTraceTripleEqual(ajaxLocParts[1],stringTrace("http:")))?stringTrace("80"):stringTrace("443")))));} // Convert data if not already a string
if(s.data && s.processData && stringTraceNotTripleEqual(typeof s.data === "undefined"?"undefined":stringTraceTypeOf(s.data),stringTrace("string"))){s.data = jQuery.param(s.data,s.traditional);} // Apply prefilters
inspectPrefiltersOrTransports(prefilters,s,options,jqXHR); // If request was aborted inside a prefilter, stop there
if(stringTraceTripleEqual(state,2)){return jqXHR;} // We can fire global events as of now if asked to
// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
fireGlobals = jQuery.event && s.global; // Watch for a new set of requests
if(fireGlobals && stringTraceTripleEqual(jQuery.active++,0)){jQuery.event.trigger(stringTrace("ajaxStart"));} // Uppercase the type
s.type = s.type.toUpperCase(); // Determine if request has content
s.hasContent = !rnoContent.test(s.type); // Save the URL in case we're toying with the If-Modified-Since
// and/or If-None-Match header later on
cacheURL = s.url; // More options handling for requests with no content
if(!s.hasContent){ // If data is available, append data to url
if(s.data){cacheURL = s.url = stringTraceAdd(s.url,stringTraceAdd(stringTraceUseValue(rquery.test(cacheURL))?stringTrace("&"):stringTrace("?"),s.data)); // #9682: remove data so that it's not used in an eventual retry
delete s.data;} // Add anti-cache in url if needed
if(stringTraceTripleEqual(s.cache,false)){s.url = stringTraceUseValue(rts.test(cacheURL))? // If there is already a '_' parameter, set its value
cacheURL.replace(rts,stringTraceAdd(stringTrace("$1_="),nonce++)): // Otherwise add one to the end
stringTraceAdd(stringTraceAdd(stringTraceAdd(cacheURL,stringTraceUseValue(rquery.test(cacheURL))?stringTrace("&"):stringTrace("?")),stringTrace("_=")),nonce++);}} // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
if(s.ifModified){if(jQuery.lastModified[cacheURL]){jqXHR.setRequestHeader(stringTrace("If-Modified-Since"),jQuery.lastModified[cacheURL]);}if(jQuery.etag[cacheURL]){jqXHR.setRequestHeader(stringTrace("If-None-Match"),jQuery.etag[cacheURL]);}} // Set the correct header, if data is being sent
if(s.data && s.hasContent && stringTraceNotTripleEqual(s.contentType,false) || options.contentType){jqXHR.setRequestHeader(stringTrace("Content-Type"),s.contentType);} // Set the Accepts header for the server, depending on the dataType
jqXHR.setRequestHeader(stringTrace("Accept"),stringTraceUseValue(s.dataTypes[0] && s.accepts[s.dataTypes[0]])?stringTraceAdd(s.accepts[s.dataTypes[0]],stringTraceUseValue(stringTraceNotTripleEqual(s.dataTypes[0],stringTrace("*")))?stringTraceAdd(stringTraceAdd(stringTrace(", "),allTypes),stringTrace("; q=0.01")):stringTrace("")):s.accepts[stringTrace("*")]); // Check for headers option
for(i in s.headers) {jqXHR.setRequestHeader(i,s.headers[i]);} // Allow custom headers/mimetypes and early abort
if(s.beforeSend && (stringTraceTripleEqual(s.beforeSend.call(callbackContext,jqXHR,s),false) || stringTraceTripleEqual(state,2))){ // Abort if not done already and return
return jqXHR.abort();} // Aborting is no longer a cancellation
strAbort = stringTrace("abort"); // Install callbacks on deferreds
for(i in {success:1,error:1,complete:1}) {jqXHR[i](s[i]);} // Get transport
transport = inspectPrefiltersOrTransports(transports,s,options,jqXHR); // If no transport, we auto-abort
if(!transport){done(-1,stringTrace("No Transport"));}else {jqXHR.readyState = 1; // Send global event
if(fireGlobals){globalEventContext.trigger(stringTrace("ajaxSend"),[jqXHR,s]);} // Timeout
if(s.async && s.timeout > 0){timeoutTimer = setTimeout(function(){jqXHR.abort(stringTrace("timeout"));},s.timeout);}try{state = 1;transport.send(requestHeaders,done);}catch(e) { // Propagate exception as error if not done
if(state < 2){done(-1,e); // Simply rethrow otherwise
}else {throw e;}}} // Callback for when everything is done
function done(status,nativeStatusText,responses,headers){var isSuccess,success,error,response,modified,statusText=nativeStatusText; // Called once
if(stringTraceTripleEqual(state,2)){return;} // State is "done" now
state = 2; // Clear timeout if it exists
if(timeoutTimer){clearTimeout(timeoutTimer);} // Dereference transport for early garbage collection
// (no matter how long the jqXHR object will be used)
transport = undefined; // Cache response headers
responseHeadersString = headers || stringTrace(""); // Set readyState
jqXHR.readyState = stringTraceUseValue(status > 0)?4:0; // Determine if successful
isSuccess = status >= 200 && status < 300 || stringTraceTripleEqual(status,304); // Get response data
if(responses){response = ajaxHandleResponses(s,jqXHR,responses);} // Convert no matter what (that way responseXXX fields are always set)
response = ajaxConvert(s,response,jqXHR,isSuccess); // If successful, handle type chaining
if(isSuccess){ // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
if(s.ifModified){modified = jqXHR.getResponseHeader(stringTrace("Last-Modified"));if(modified){jQuery.lastModified[cacheURL] = modified;}modified = jqXHR.getResponseHeader(stringTrace("etag"));if(modified){jQuery.etag[cacheURL] = modified;}} // if no content
if(stringTraceTripleEqual(status,204) || stringTraceTripleEqual(s.type,stringTrace("HEAD"))){statusText = stringTrace("nocontent"); // if not modified
}else if(stringTraceTripleEqual(status,304)){statusText = stringTrace("notmodified"); // If we have data, let's convert it
}else {statusText = response.state;success = response.data;error = response.error;isSuccess = !error;}}else { // Extract error from statusText and normalize for non-aborts
error = statusText;if(status || !statusText){statusText = stringTrace("error");if(status < 0){status = 0;}}} // Set data for the fake xhr object
jqXHR.status = status;jqXHR.statusText = stringTraceAdd(nativeStatusText || statusText,stringTrace("")); // Success/Error
if(isSuccess){deferred.resolveWith(callbackContext,[success,statusText,jqXHR]);}else {deferred.rejectWith(callbackContext,[jqXHR,statusText,error]);} // Status-dependent callbacks
jqXHR.statusCode(statusCode);statusCode = undefined;if(fireGlobals){globalEventContext.trigger(stringTraceUseValue(isSuccess)?stringTrace("ajaxSuccess"):stringTrace("ajaxError"),[jqXHR,s,stringTraceUseValue(isSuccess)?success:error]);} // Complete
completeDeferred.fireWith(callbackContext,[jqXHR,statusText]);if(fireGlobals){globalEventContext.trigger(stringTrace("ajaxComplete"),[jqXHR,s]); // Handle the global AJAX counter
if(! --jQuery.active){jQuery.event.trigger(stringTrace("ajaxStop"));}}}return jqXHR;},getJSON:function(url,data,callback){return jQuery.get(url,data,callback,stringTrace("json"));},getScript:function(url,callback){return jQuery.get(url,undefined,callback,stringTrace("script"));}});jQuery.each([stringTrace("get"),stringTrace("post")],function(i,method){jQuery[method] = function(url,data,callback,type){ // Shift arguments if data argument was omitted
if(jQuery.isFunction(data)){type = type || callback;callback = data;data = undefined;}return jQuery.ajax({url:url,type:method,dataType:type,data:data,success:callback});};});jQuery._evalUrl = function(url){return jQuery.ajax({url:url,type:stringTrace("GET"),dataType:stringTrace("script"),async:false,global:false,"throws":true});};jQuery.fn.extend({wrapAll:function(html){var wrap;if(jQuery.isFunction(html)){return this.each(function(i){jQuery(this).wrapAll(html.call(this,i));});}if(this[0]){ // The elements to wrap the target around
wrap = jQuery(html,this[0].ownerDocument).eq(0).clone(true);if(this[0].parentNode){wrap.insertBefore(this[0]);}wrap.map(function(){var elem=this;while(stringTraceUseValue(elem.firstElementChild)) {elem = elem.firstElementChild;}return elem;}).append(this);}return this;},wrapInner:function(html){if(jQuery.isFunction(html)){return this.each(function(i){jQuery(this).wrapInner(html.call(this,i));});}return this.each(function(){var self=jQuery(this),contents=self.contents();if(contents.length){contents.wrapAll(html);}else {self.append(html);}});},wrap:function(html){var isFunction=jQuery.isFunction(html);return this.each(function(i){jQuery(this).wrapAll(stringTraceUseValue(isFunction)?html.call(this,i):html);});},unwrap:function(){return this.parent().each(function(){if(!jQuery.nodeName(this,stringTrace("body"))){jQuery(this).replaceWith(this.childNodes);}}).end();}});jQuery.expr.filters.hidden = function(elem){ // Support: Opera <= 12.12
// Opera reports offsetWidths and offsetHeights less than zero on some elements
return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;};jQuery.expr.filters.visible = function(elem){return !jQuery.expr.filters.hidden(elem);};var r20=/%20/g,rbracket=/\[\]$/,rCRLF=/\r?\n/g,rsubmitterTypes=/^(?:submit|button|image|reset|file)$/i,rsubmittable=/^(?:input|select|textarea|keygen)/i;function buildParams(prefix,obj,traditional,add){var name;if(jQuery.isArray(obj)){ // Serialize array item.
jQuery.each(obj,function(i,v){if(traditional || rbracket.test(prefix)){ // Treat each array item as a scalar.
add(prefix,v);}else { // Item is non-scalar (array or object), encode its numeric index.
buildParams(stringTraceAdd(stringTraceAdd(stringTraceAdd(prefix,stringTrace("[")),stringTraceUseValue(stringTraceTripleEqual(typeof v === "undefined"?"undefined":stringTraceTypeOf(v),stringTrace("object")))?i:stringTrace("")),stringTrace("]")),v,traditional,add);}});}else if(!traditional && stringTraceTripleEqual(jQuery.type(obj),stringTrace("object"))){ // Serialize object item.
for(name in obj) {buildParams(stringTraceAdd(stringTraceAdd(stringTraceAdd(prefix,stringTrace("[")),name),stringTrace("]")),obj[name],traditional,add);}}else { // Serialize scalar item.
add(prefix,obj);}} // Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function(a,traditional){var prefix,s=[],add=function(key,value){ // If value is a function, invoke it and return its value
value = stringTraceUseValue(jQuery.isFunction(value))?value():stringTraceUseValue(value == null)?stringTrace(""):value;s[s.length] = stringTraceAdd(stringTraceAdd(encodeURIComponent(key),stringTrace("=")),encodeURIComponent(value));}; // Set traditional to true for jQuery <= 1.3.2 behavior.
if(stringTraceTripleEqual(traditional,undefined)){traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;} // If an array was passed in, assume that it is an array of form elements.
if(jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)){ // Serialize the form elements
jQuery.each(a,function(){add(this.name,this.value);});}else { // If traditional, encode the "old" way (the way 1.3.2 or older
// did it), otherwise encode params recursively.
for(prefix in a) {buildParams(prefix,a[prefix],traditional,add);}} // Return the resulting serialization
return s.join(stringTrace("&")).replace(r20,stringTrace("+"));};jQuery.fn.extend({serialize:function(){return jQuery.param(this.serializeArray());},serializeArray:function(){return this.map(function(){ // Can add propHook for "elements" to filter or add form elements
var elements=jQuery.prop(this,stringTrace("elements"));return stringTraceUseValue(elements)?jQuery.makeArray(elements):this;}).filter(function(){var type=this.type; // Use .is( ":disabled" ) so that fieldset[disabled] works
return this.name && !jQuery(this).is(stringTrace(":disabled")) && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));}).map(function(i,elem){var val=jQuery(this).val();return stringTraceUseValue(val == null)?null:stringTraceUseValue(jQuery.isArray(val))?jQuery.map(val,function(val){return {name:elem.name,value:val.replace(rCRLF,stringTrace("\r\n"))};}):{name:elem.name,value:val.replace(rCRLF,stringTrace("\r\n"))};}).get();}});jQuery.ajaxSettings.xhr = function(){try{return new XMLHttpRequest();}catch(e) {}};var xhrId=0,xhrCallbacks={},xhrSuccessStatus={ // file protocol always yields status code 0, assume 200
0:200, // Support: IE9
// #1450: sometimes IE returns 1223 when it should be 204
1223:204},xhrSupported=jQuery.ajaxSettings.xhr(); // Support: IE9
// Open requests must be manually aborted on unload (#5280)
// See https://support.microsoft.com/kb/2856746 for more info
if(window.attachEvent){window.attachEvent(stringTrace("onunload"),function(){for(var key in xhrCallbacks) {xhrCallbacks[key]();}});}support.cors = !!xhrSupported && stringTrace("withCredentials") in xhrSupported;support.ajax = xhrSupported = !!xhrSupported;jQuery.ajaxTransport(function(options){var callback; // Cross domain only allowed if supported through XMLHttpRequest
if(support.cors || xhrSupported && !options.crossDomain){return {send:function(headers,complete){var i,xhr=options.xhr(),id=++xhrId;xhr.open(options.type,options.url,options.async,options.username,options.password); // Apply custom fields if provided
if(options.xhrFields){for(i in options.xhrFields) {xhr[i] = options.xhrFields[i];}} // Override mime type if needed
if(options.mimeType && xhr.overrideMimeType){xhr.overrideMimeType(options.mimeType);} // X-Requested-With header
// For cross-domain requests, seeing as conditions for a preflight are
// akin to a jigsaw puzzle, we simply never set it to be sure.
// (it can always be set on a per-request basis or even using ajaxSetup)
// For same-domain requests, won't change header if already provided.
if(!options.crossDomain && !headers[stringTrace("X-Requested-With")]){headers[stringTrace("X-Requested-With")] = stringTrace("XMLHttpRequest");} // Set headers
for(i in headers) {xhr.setRequestHeader(i,headers[i]);} // Callback
callback = function(type){return function(){if(callback){delete xhrCallbacks[id];callback = xhr.onload = xhr.onerror = null;if(stringTraceTripleEqual(type,stringTrace("abort"))){xhr.abort();}else if(stringTraceTripleEqual(type,stringTrace("error"))){complete( // file: protocol always yields status 0; see #8605, #14207
xhr.status,xhr.statusText);}else {complete(xhrSuccessStatus[xhr.status] || xhr.status,xhr.statusText, // Support: IE9
// Accessing binary-data responseText throws an exception
// (#11426)
stringTraceUseValue(stringTraceTripleEqual(typeof xhr.responseText === "undefined"?"undefined":stringTraceTypeOf(xhr.responseText),stringTrace("string")))?{text:xhr.responseText}:undefined,xhr.getAllResponseHeaders());}}};}; // Listen to events
xhr.onload = callback();xhr.onerror = callback(stringTrace("error")); // Create the abort callback
callback = xhrCallbacks[id] = callback(stringTrace("abort"));try{ // Do send the request (this may raise an exception)
xhr.send(options.hasContent && options.data || null);}catch(e) { // #14683: Only rethrow if this hasn't been notified as an error yet
if(callback){throw e;}}},abort:function(){if(callback){callback();}}};}}); // Install script dataType
jQuery.ajaxSetup({accepts:{script:stringTrace("text/javascript, application/javascript, application/ecmascript, application/x-ecmascript")},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(text){jQuery.globalEval(text);return text;}}}); // Handle cache's special case and crossDomain
jQuery.ajaxPrefilter(stringTrace("script"),function(s){if(stringTraceTripleEqual(s.cache,undefined)){s.cache = false;}if(s.crossDomain){s.type = stringTrace("GET");}}); // Bind script tag hack transport
jQuery.ajaxTransport(stringTrace("script"),function(s){ // This transport only deals with cross domain requests
if(s.crossDomain){var script,callback;return {send:function(_,complete){script = jQuery(stringTrace("<script>")).prop({async:true,charset:s.scriptCharset,src:s.url}).on(stringTrace("load error"),callback = function(evt){script.remove();callback = null;if(evt){complete(stringTraceUseValue(stringTraceTripleEqual(evt.type,stringTrace("error")))?404:200,evt.type);}});document.head.appendChild(script[0]);},abort:function(){if(callback){callback();}}};}});var oldCallbacks=[],rjsonp=/(=)\?(?=&|$)|\?\?/; // Default jsonp settings
jQuery.ajaxSetup({jsonp:stringTrace("callback"),jsonpCallback:function(){var callback=oldCallbacks.pop() || stringTraceAdd(stringTraceAdd(jQuery.expando,stringTrace("_")),nonce++);this[callback] = true;return callback;}}); // Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter(stringTrace("json jsonp"),function(s,originalSettings,jqXHR){var callbackName,overwritten,responseContainer,jsonProp=stringTraceNotTripleEqual(s.jsonp,false) && (stringTraceUseValue(rjsonp.test(s.url))?stringTrace("url"):stringTraceTripleEqual(typeof s.data === "undefined"?"undefined":stringTraceTypeOf(s.data),stringTrace("string")) && !(s.contentType || stringTrace("")).indexOf(stringTrace("application/x-www-form-urlencoded")) && rjsonp.test(s.data) && stringTrace("data")); // Handle iff the expected data type is "jsonp" or we have a parameter to set
if(jsonProp || stringTraceTripleEqual(s.dataTypes[0],stringTrace("jsonp"))){ // Get callback name, remembering preexisting value associated with it
callbackName = s.jsonpCallback = stringTraceUseValue(jQuery.isFunction(s.jsonpCallback))?s.jsonpCallback():s.jsonpCallback; // Insert callback into url or form data
if(jsonProp){s[jsonProp] = s[jsonProp].replace(rjsonp,stringTraceAdd(stringTrace("$1"),callbackName));}else if(stringTraceNotTripleEqual(s.jsonp,false)){s.url = stringTraceAdd(s.url,stringTraceAdd(stringTraceAdd(stringTraceAdd(stringTraceUseValue(rquery.test(s.url))?stringTrace("&"):stringTrace("?"),s.jsonp),stringTrace("=")),callbackName));} // Use data converter to retrieve json after script execution
s.converters[stringTrace("script json")] = function(){if(!responseContainer){jQuery.error(stringTraceAdd(callbackName,stringTrace(" was not called")));}return responseContainer[0];}; // force json dataType
s.dataTypes[0] = stringTrace("json"); // Install callback
overwritten = window[callbackName];window[callbackName] = function(){responseContainer = arguments;}; // Clean-up function (fires after converters)
jqXHR.always(function(){ // Restore preexisting value
window[callbackName] = overwritten; // Save back as free
if(s[callbackName]){ // make sure that re-using the options doesn't screw things around
s.jsonpCallback = originalSettings.jsonpCallback; // save the callback name for future use
oldCallbacks.push(callbackName);} // Call if it was a function and we have a response
if(responseContainer && jQuery.isFunction(overwritten)){overwritten(responseContainer[0]);}responseContainer = overwritten = undefined;}); // Delegate to script
return stringTrace("script");}}); // data: string of html
// context (optional): If specified, the fragment will be created in this context, defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function(data,context,keepScripts){if(!data || stringTraceNotTripleEqual(typeof data === "undefined"?"undefined":stringTraceTypeOf(data),stringTrace("string"))){return null;}if(stringTraceTripleEqual(typeof context === "undefined"?"undefined":stringTraceTypeOf(context),stringTrace("boolean"))){keepScripts = context;context = false;}context = context || document;var parsed=rsingleTag.exec(data),scripts=!keepScripts && []; // Single tag
if(parsed){return [context.createElement(parsed[1])];}parsed = jQuery.buildFragment([data],context,scripts);if(scripts && scripts.length){jQuery(scripts).remove();}return jQuery.merge([],parsed.childNodes);}; // Keep a copy of the old load method
var _load=jQuery.fn.load; /**
 * Load a url into a page
 */jQuery.fn.load = function(url,params,callback){if(stringTraceNotTripleEqual(typeof url === "undefined"?"undefined":stringTraceTypeOf(url),stringTrace("string")) && _load){return _load.apply(this,arguments);}var selector,type,response,self=this,off=url.indexOf(stringTrace(" "));if(off >= 0){selector = jQuery.trim(url.slice(off));url = url.slice(0,off);} // If it's a function
if(jQuery.isFunction(params)){ // We assume that it's the callback
callback = params;params = undefined; // Otherwise, build a param string
}else if(params && stringTraceTripleEqual(typeof params === "undefined"?"undefined":stringTraceTypeOf(params),stringTrace("object"))){type = stringTrace("POST");} // If we have elements to modify, make the request
if(self.length > 0){jQuery.ajax({url:url, // if "type" variable is undefined, then "GET" method will be used
type:type,dataType:stringTrace("html"),data:params}).done(function(responseText){ // Save response for use in complete callback
response = arguments;self.html(stringTraceUseValue(selector)? // If a selector was specified, locate the right elements in a dummy div
// Exclude scripts to avoid IE 'Permission Denied' errors
jQuery(stringTrace("<div>")).append(jQuery.parseHTML(responseText)).find(selector): // Otherwise use the full result
responseText);}).complete(callback && function(jqXHR,status){self.each(callback,response || [jqXHR.responseText,status,jqXHR]);});}return this;}; // Attach a bunch of functions for handling common AJAX events
jQuery.each([stringTrace("ajaxStart"),stringTrace("ajaxStop"),stringTrace("ajaxComplete"),stringTrace("ajaxError"),stringTrace("ajaxSuccess"),stringTrace("ajaxSend")],function(i,type){jQuery.fn[type] = function(fn){return this.on(type,fn);};});jQuery.expr.filters.animated = function(elem){return jQuery.grep(jQuery.timers,function(fn){return stringTraceTripleEqual(elem,fn.elem);}).length;};var docElem=window.document.documentElement; /**
 * Gets a window from an element
 */function getWindow(elem){return stringTraceUseValue(jQuery.isWindow(elem))?elem:stringTraceTripleEqual(elem.nodeType,9) && elem.defaultView;}jQuery.offset = {setOffset:function(elem,options,i){var curPosition,curLeft,curCSSTop,curTop,curOffset,curCSSLeft,calculatePosition,position=jQuery.css(elem,stringTrace("position")),curElem=jQuery(elem),props={}; // Set position first, in-case top/left are set even on static elem
if(stringTraceTripleEqual(position,stringTrace("static"))){elem.style.position = stringTrace("relative");}curOffset = curElem.offset();curCSSTop = jQuery.css(elem,stringTrace("top"));curCSSLeft = jQuery.css(elem,stringTrace("left"));calculatePosition = (stringTraceTripleEqual(position,stringTrace("absolute")) || stringTraceTripleEqual(position,stringTrace("fixed"))) && stringTraceAdd(curCSSTop,curCSSLeft).indexOf(stringTrace("auto")) > -1; // Need to be able to calculate position if either
// top or left is auto and position is either absolute or fixed
if(calculatePosition){curPosition = curElem.position();curTop = curPosition.top;curLeft = curPosition.left;}else {curTop = parseFloat(curCSSTop) || 0;curLeft = parseFloat(curCSSLeft) || 0;}if(jQuery.isFunction(options)){options = options.call(elem,i,curOffset);}if(options.top != null){props.top = stringTraceAdd(options.top - curOffset.top,curTop);}if(options.left != null){props.left = stringTraceAdd(options.left - curOffset.left,curLeft);}if(stringTrace("using") in options){options.using.call(elem,props);}else {curElem.css(props);}}};jQuery.fn.extend({offset:function(options){if(arguments.length){return stringTraceUseValue(stringTraceTripleEqual(options,undefined))?this:this.each(function(i){jQuery.offset.setOffset(this,options,i);});}var docElem,win,elem=this[0],box={top:0,left:0},doc=elem && elem.ownerDocument;if(!doc){return;}docElem = doc.documentElement; // Make sure it's not a disconnected DOM node
if(!jQuery.contains(docElem,elem)){return box;} // Support: BlackBerry 5, iOS 3 (original iPhone)
// If we don't have gBCR, just use 0,0 rather than error
if(stringTraceNotTripleEqual(typeof elem.getBoundingClientRect === "undefined"?"undefined":stringTraceTypeOf(elem.getBoundingClientRect),strundefined)){box = elem.getBoundingClientRect();}win = getWindow(doc);return {top:stringTraceAdd(box.top,win.pageYOffset) - docElem.clientTop,left:stringTraceAdd(box.left,win.pageXOffset) - docElem.clientLeft};},position:function(){if(!this[0]){return;}var offsetParent,offset,elem=this[0],parentOffset={top:0,left:0}; // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
if(stringTraceTripleEqual(jQuery.css(elem,stringTrace("position")),stringTrace("fixed"))){ // Assume getBoundingClientRect is there when computed position is fixed
offset = elem.getBoundingClientRect();}else { // Get *real* offsetParent
offsetParent = this.offsetParent(); // Get correct offsets
offset = this.offset();if(!jQuery.nodeName(offsetParent[0],stringTrace("html"))){parentOffset = offsetParent.offset();} // Add offsetParent borders
parentOffset.top = stringTraceAdd(parentOffset.top,jQuery.css(offsetParent[0],stringTrace("borderTopWidth"),true));parentOffset.left = stringTraceAdd(parentOffset.left,jQuery.css(offsetParent[0],stringTrace("borderLeftWidth"),true));} // Subtract parent offsets and element margins
return {top:offset.top - parentOffset.top - jQuery.css(elem,stringTrace("marginTop"),true),left:offset.left - parentOffset.left - jQuery.css(elem,stringTrace("marginLeft"),true)};},offsetParent:function(){return this.map(function(){var offsetParent=this.offsetParent || docElem;while(stringTraceUseValue(offsetParent && !jQuery.nodeName(offsetParent,stringTrace("html")) && stringTraceTripleEqual(jQuery.css(offsetParent,stringTrace("position")),stringTrace("static")))) {offsetParent = offsetParent.offsetParent;}return offsetParent || docElem;});}}); // Create scrollLeft and scrollTop methods
jQuery.each({scrollLeft:stringTrace("pageXOffset"),scrollTop:stringTrace("pageYOffset")},function(method,prop){var top=stringTraceTripleEqual(stringTrace("pageYOffset"),prop);jQuery.fn[method] = function(val){return access(this,function(elem,method,val){var win=getWindow(elem);if(stringTraceTripleEqual(val,undefined)){return stringTraceUseValue(win)?win[prop]:elem[method];}if(win){win.scrollTo(stringTraceUseValue(!top)?val:window.pageXOffset,stringTraceUseValue(top)?val:window.pageYOffset);}else {elem[method] = val;}},method,val,arguments.length,null);};}); // Support: Safari<7+, Chrome<37+
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each([stringTrace("top"),stringTrace("left")],function(i,prop){jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition,function(elem,computed){if(computed){computed = curCSS(elem,prop); // If curCSS returns percentage, fallback to offset
return stringTraceUseValue(rnumnonpx.test(computed))?stringTraceAdd(jQuery(elem).position()[prop],stringTrace("px")):computed;}});}); // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each({Height:stringTrace("height"),Width:stringTrace("width")},function(name,type){jQuery.each({padding:stringTraceAdd(stringTrace("inner"),name),content:type,"":stringTraceAdd(stringTrace("outer"),name)},function(defaultExtra,funcName){ // Margin is only for outerHeight, outerWidth
jQuery.fn[funcName] = function(margin,value){var chainable=arguments.length && (defaultExtra || stringTraceNotTripleEqual(typeof margin === "undefined"?"undefined":stringTraceTypeOf(margin),stringTrace("boolean"))),extra=defaultExtra || (stringTraceUseValue(stringTraceTripleEqual(margin,true) || stringTraceTripleEqual(value,true))?stringTrace("margin"):stringTrace("border"));return access(this,function(elem,type,value){var doc;if(jQuery.isWindow(elem)){ // As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
// isn't a whole lot we can do. See pull request at this URL for discussion:
// https://github.com/jquery/jquery/pull/764
return elem.document.documentElement[stringTraceAdd(stringTrace("client"),name)];} // Get document width or height
if(stringTraceTripleEqual(elem.nodeType,9)){doc = elem.documentElement; // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
// whichever is greatest
return Math.max(elem.body[stringTraceAdd(stringTrace("scroll"),name)],doc[stringTraceAdd(stringTrace("scroll"),name)],elem.body[stringTraceAdd(stringTrace("offset"),name)],doc[stringTraceAdd(stringTrace("offset"),name)],doc[stringTraceAdd(stringTrace("client"),name)]);}return stringTraceUseValue(stringTraceTripleEqual(value,undefined))? // Get width or height on the element, requesting but not forcing parseFloat
jQuery.css(elem,type,extra): // Set width or height on the element
jQuery.style(elem,type,value,extra);},type,stringTraceUseValue(chainable)?margin:undefined,chainable,null);};});}); // The number of elements contained in the matched element set
jQuery.fn.size = function(){return this.length;};jQuery.fn.andSelf = jQuery.fn.addBack; // Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.
// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon
if(stringTraceTripleEqual(typeof define === "undefined"?"undefined":stringTraceTypeOf(define),stringTrace("function")) && define.amd){define(stringTrace("jquery"),[],function(){return jQuery;});}var  // Map over jQuery in case of overwrite
_jQuery=window.jQuery, // Map over the $ in case of overwrite
_$=window.$;jQuery.noConflict = function(deep){if(stringTraceTripleEqual(window.$,jQuery)){window.$ = _$;}if(deep && stringTraceTripleEqual(window.jQuery,jQuery)){window.jQuery = _jQuery;}return jQuery;}; // Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if(stringTraceTripleEqual(typeof noGlobal === "undefined"?"undefined":stringTraceTypeOf(noGlobal),strundefined)){window.jQuery = window.$ = jQuery;}return jQuery;});

//# sourceMappingURL=data:application/json;base64,